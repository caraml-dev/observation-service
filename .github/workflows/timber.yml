name: CI

on:
  # Automatically run CI on Release and Pre-Release tags and main branch
  # (except changes to non-relevant paths)
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
    branches:
      - main
    paths-ignore:
      - "images/fluentd/**"

  # Automatically run CI on branches, that have active PR opened
  pull_request:
    branches:
      - main
    paths-ignore:
      - "images/fluentd/**"
  
  # To make it possible to trigger e2e CI workflow for any arbitrary git ref
  workflow_dispatch:

env:
  ARTIFACT_RETENTION_DAYS: 7
  GO_VERSION: 1.18
  GO_LINT_VERSION: v1.45.2

jobs:
  lint-protos:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: bufbuild/buf-setup-action@v1
        with:
          version: '1.7.0'
          github_token: ${{ github.token }}
      - uses: s4u/setup-maven-action@v1.2.1
        with:
          java-version: 11
          maven-version: 3.8.4
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-dataset-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-dataset-
      - uses: bufbuild/buf-lint-action@v1
        with:
          input: dataset-service/proto
      - name: generate
        working-directory: dataset-service
        run: make setup generate

  lint-go:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        id: setup-go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/checkout@v3
      - name: Lint Common module
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.GO_LINT_VERSION }}
          working-directory: common
          skip-pkg-cache: true
          skip-build-cache: true
          args: --timeout 3m --verbose
      - name: Lint Observation Service module
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.GO_LINT_VERSION }}
          working-directory: observation-service
          skip-pkg-cache: true
          skip-build-cache: true
          args: --timeout 3m --verbose
      - name: Lint Dataset Service module
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.GO_LINT_VERSION }}
          working-directory: dataset-service
          skip-pkg-cache: true
          skip-build-cache: true
          args: --timeout 3m --verbose
  
  lint-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          architecture: x64
      - name: Install dependencies
        run: make dep-python
      - name: Lint python
        run: make lint-python

  unit-tests-observation-service:
    runs-on: ubuntu-latest
    env:
      GOPATH: ${{ github.workspace }}/api/.go
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Test Dependencies
        uses: ./.github/actions/setup-tests
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Run Observation Service test
        working-directory: observation-service
        run: make test-observation-service
  
  unit-tests-dataset-service:
    runs-on: ubuntu-latest
    env:
      GOPATH: ${{ github.workspace }}/api/.go
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Test Dependencies
        uses: ./.github/actions/setup-tests
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Run Dataset Service test
        working-directory: dataset-service
        run: make test

  unit-tests-upi-logs-parser:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: logwriter/fluent-plugin-upi-logs
    steps:
      - uses: actions/checkout@v3
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
      - run: bundle install
      - name: Lint with Rubocop
        run: rubocop
      - name: Unit-test
        run: bundle exec rake

  e2e-tests:
    runs-on: ubuntu-latest
    env:
      GOPATH: ${{ github.workspace }}/api/.go
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          architecture: x64
      - name: Download k3d
        run: |
          curl --silent --fail https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | TAG=v5.4.1 bash
      - name: Setup E2E test dependencies
        run: make setup-e2e
      - name: Build Dataset Service binary
        run: make build-dataset-service
      - name: Run E2E tests
        run: make e2e

  release-rules:
    runs-on: ubuntu-latest
    outputs:
      release-type: ${{ steps.release-rules.outputs.release-type }}
    steps:
      - uses: actions/checkout@v2
      - id: release-rules
        uses: ./.github/actions/release-rules

  release:
   # Automatically publish release and pre-release artifacts.
   #
   # As for dev releases, make it possible to publish artifacts
   # manually by approving 'deployment' in the 'manual' environment.
   #
   # Dev build can be released either from the 'main' branch or
   # by running this workflow manually with `workflow_dispatch` event.
    if: >-
      contains('release,pre-release', needs.release-rules.outputs.release-type)
        || ( github.event_name != 'pull_request' )
        || ( github.event.pull_request.head.repo.full_name == github.repository )
    needs:
      - lint-go
      - lint-python
      - unit-tests-observation-service
      - unit-tests-dataset-service
      - e2e-tests
      - release-rules
    uses: ./.github/workflows/release.yml
    with:
      environment: ${{ needs.release-rules.outputs.release-type == 'dev' && 'manual' || '' }}
    secrets:
      ghcr_token: ${{ secrets.GITHUB_TOKEN }}
