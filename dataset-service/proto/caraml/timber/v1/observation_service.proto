syntax = "proto3";

package caraml.timber.v1;
option go_package = "github.com/caraml-dev/timber/dataset-service/api/caraml/timber/v1;api";

import "google/protobuf/timestamp.proto";
import "caraml/timber/v1/status.proto";

// Data source where Observation logs should be retrieved from
enum SourceType {
    SOURCE_TYPE_UNSPECIFIED = 0;
    // No-Op represents no need to fetch logs from any data source, this should be selected if
    // Observation Service should be deployed for just the eager API
    SOURCE_TYPE_EAGER = 1;
    // Observation Service will poll logs from a Kafka source
    SOURCE_TYPE_KAFKA = 2;
}

// Configurations of Data source where Observation logs should be retrieved from
message Source {
    SourceType type = 1;
}

// Data sink where Observation logs would be flushed to
enum SinkType {
    SINK_TYPE_UNSPECIFIED = 0;
    // No-Op represents no need to flush logs to any data sink
    SINK_TYPE_NOOP = 1;
    // Observation Service will publish logs to standard output
    SINK_TYPE_STDOUT = 2;
    // Observation Service will flush logs to a Kafka sink
    SINK_TYPE_KAFKA = 3;
    // Observation Service will flush logs to Fluentd
    SINK_TYPE_FLUENTD = 4;
}

// Configurations of Data sink where Observation logs would be flushed to
message Sink {
    SinkType type = 1;
}

// ObservationServiceConfig describes details of a Observation Service
message ObservationService {
    // Project id that owns the observation service
    int64 project_id = 1;
    // Observation service id
    int64 id = 2;
    // Observation service name
    string name = 3;
    // Configuration for pull-based Observation Service data source.
    Source source = 4;
    // Configuration for Observation Service data sink.
    Sink sink = 5;
    // Status of the observation service
    Status status = 10;
    // Creation timestamp
    google.protobuf.Timestamp create_time = 11;
    // Last update timestamp
    google.protobuf.Timestamp update_time = 12;
}

