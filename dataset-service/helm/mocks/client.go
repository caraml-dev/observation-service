// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	action "helm.sh/helm/v3/pkg/action"
	chart "helm.sh/helm/v3/pkg/chart"

	mock "github.com/stretchr/testify/mock"

	release "helm.sh/helm/v3/pkg/release"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetRelease provides a mock function with given fields: releaseName, namespaceName, actionConfig
func (_m *Client) GetRelease(releaseName string, namespaceName string, actionConfig *action.Configuration) (*release.Release, error) {
	ret := _m.Called(releaseName, namespaceName, actionConfig)

	var r0 *release.Release
	if rf, ok := ret.Get(0).(func(string, string, *action.Configuration) *release.Release); ok {
		r0 = rf(releaseName, namespaceName, actionConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.Release)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *action.Configuration) error); ok {
		r1 = rf(releaseName, namespaceName, actionConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Install provides a mock function with given fields: releaseName, namespaceName, _a2, values, actionConfig
func (_m *Client) Install(releaseName string, namespaceName string, _a2 *chart.Chart, values map[string]interface{}, actionConfig *action.Configuration) (*release.Release, error) {
	ret := _m.Called(releaseName, namespaceName, _a2, values, actionConfig)

	var r0 *release.Release
	if rf, ok := ret.Get(0).(func(string, string, *chart.Chart, map[string]interface{}, *action.Configuration) *release.Release); ok {
		r0 = rf(releaseName, namespaceName, _a2, values, actionConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.Release)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *chart.Chart, map[string]interface{}, *action.Configuration) error); ok {
		r1 = rf(releaseName, namespaceName, _a2, values, actionConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadChart provides a mock function with given fields: chartPath
func (_m *Client) ReadChart(chartPath string) (*chart.Chart, error) {
	ret := _m.Called(chartPath)

	var r0 *chart.Chart
	if rf, ok := ret.Get(0).(func(string) *chart.Chart); ok {
		r0 = rf(chartPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chart.Chart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chartPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upgrade provides a mock function with given fields: releaseName, namespaceName, _a2, values, actionConfig
func (_m *Client) Upgrade(releaseName string, namespaceName string, _a2 *chart.Chart, values map[string]interface{}, actionConfig *action.Configuration) (*release.Release, error) {
	ret := _m.Called(releaseName, namespaceName, _a2, values, actionConfig)

	var r0 *release.Release
	if rf, ok := ret.Get(0).(func(string, string, *chart.Chart, map[string]interface{}, *action.Configuration) *release.Release); ok {
		r0 = rf(releaseName, namespaceName, _a2, values, actionConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*release.Release)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *chart.Chart, map[string]interface{}, *action.Configuration) error); ok {
		r1 = rf(releaseName, namespaceName, _a2, values, actionConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
