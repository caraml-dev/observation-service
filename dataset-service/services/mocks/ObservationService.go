// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	api "github.com/caraml-dev/timber/dataset-service/api"
	mock "github.com/stretchr/testify/mock"
)

// ObservationService is an autogenerated mock type for the ObservationService type
type ObservationService struct {
	mock.Mock
}

// CreateService provides a mock function with given fields: projectName, config
func (_m *ObservationService) CreateService(projectName string, config *api.ObservationServiceConfig) (*api.ObservationServiceResponse, error) {
	ret := _m.Called(projectName, config)

	var r0 *api.ObservationServiceResponse
	if rf, ok := ret.Get(0).(func(string, *api.ObservationServiceConfig) *api.ObservationServiceResponse); ok {
		r0 = rf(projectName, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ObservationServiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *api.ObservationServiceConfig) error); ok {
		r1 = rf(projectName, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateService provides a mock function with given fields: projectName, observationServiceID, config
func (_m *ObservationService) UpdateService(projectName string, observationServiceID int, config *api.ObservationServiceConfig) (*api.ObservationServiceResponse, error) {
	ret := _m.Called(projectName, observationServiceID, config)

	var r0 *api.ObservationServiceResponse
	if rf, ok := ret.Get(0).(func(string, int, *api.ObservationServiceConfig) *api.ObservationServiceResponse); ok {
		r0 = rf(projectName, observationServiceID, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ObservationServiceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, *api.ObservationServiceConfig) error); ok {
		r1 = rf(projectName, observationServiceID, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewObservationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewObservationService creates a new instance of ObservationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewObservationService(t mockConstructorTestingTNewObservationService) *ObservationService {
	mock := &ObservationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
