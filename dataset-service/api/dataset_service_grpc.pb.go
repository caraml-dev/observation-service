// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: caraml/timber/v1/dataset_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatasetServiceClient is the client API for DatasetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasetServiceClient interface {
	// ListLogMetadata return paginated list of log metadata under a project and filtered by query string.
	ListLogMetadata(ctx context.Context, in *ListLogMetadataRequest, opts ...grpc.CallOption) (*ListLogMetadataResponse, error)
	// GetLogMetadata returns metadata of a log.
	GetLogMetadata(ctx context.Context, in *GetLogMetadataRequest, opts ...grpc.CallOption) (*GetLogMetadataResponse, error)
	// ListLogWriters return paginated list of log writers under a project and filtered by query string.
	ListLogWriters(ctx context.Context, in *ListLogWritersRequest, opts ...grpc.CallOption) (*ListLogWritersResponse, error)
	// GetLogWriter return details of the log writer deployment.
	GetLogWriter(ctx context.Context, in *GetLogWriterRequest, opts ...grpc.CallOption) (*GetLogWriterResponse, error)
	// CreateLogWriter creates a new log writer deployment as specified by the details given in the request body.
	CreateLogWriter(ctx context.Context, in *CreateLogWriterRequest, opts ...grpc.CallOption) (*CreateLogWriterResponse, error)
	// UpdateLogWriter updates an existing log writer deployment as specified by the details given in the request body.
	UpdateLogWriter(ctx context.Context, in *UpdateLogWriterRequest, opts ...grpc.CallOption) (*UpdateLogWriterResponse, error)
	// ListObservationServices return paginated list of observation services under a project and filtered by query string.
	ListObservationServices(ctx context.Context, in *ListObservationServicesRequest, opts ...grpc.CallOption) (*ListObservationServicesResponse, error)
	// GetObservationService return details of the observation service deployment.
	GetObservationService(ctx context.Context, in *GetObservationServiceRequest, opts ...grpc.CallOption) (*GetObservationServiceResponse, error)
	// CreateObservationService creates a new observation service deployment as specified by the details given in the request body.
	CreateObservationService(ctx context.Context, in *CreateObservationServiceRequest, opts ...grpc.CallOption) (*CreateObservationServiceResponse, error)
	// UpdateObservationService updates an existing observation service deployment as specified by the details given in the request body.
	UpdateObservationService(ctx context.Context, in *UpdateObservationServiceRequest, opts ...grpc.CallOption) (*UpdateObservationServiceResponse, error)
}

type datasetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetServiceClient(cc grpc.ClientConnInterface) DatasetServiceClient {
	return &datasetServiceClient{cc}
}

func (c *datasetServiceClient) ListLogMetadata(ctx context.Context, in *ListLogMetadataRequest, opts ...grpc.CallOption) (*ListLogMetadataResponse, error) {
	out := new(ListLogMetadataResponse)
	err := c.cc.Invoke(ctx, "/caraml.timber.v1.DatasetService/ListLogMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetLogMetadata(ctx context.Context, in *GetLogMetadataRequest, opts ...grpc.CallOption) (*GetLogMetadataResponse, error) {
	out := new(GetLogMetadataResponse)
	err := c.cc.Invoke(ctx, "/caraml.timber.v1.DatasetService/GetLogMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) ListLogWriters(ctx context.Context, in *ListLogWritersRequest, opts ...grpc.CallOption) (*ListLogWritersResponse, error) {
	out := new(ListLogWritersResponse)
	err := c.cc.Invoke(ctx, "/caraml.timber.v1.DatasetService/ListLogWriters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetLogWriter(ctx context.Context, in *GetLogWriterRequest, opts ...grpc.CallOption) (*GetLogWriterResponse, error) {
	out := new(GetLogWriterResponse)
	err := c.cc.Invoke(ctx, "/caraml.timber.v1.DatasetService/GetLogWriter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) CreateLogWriter(ctx context.Context, in *CreateLogWriterRequest, opts ...grpc.CallOption) (*CreateLogWriterResponse, error) {
	out := new(CreateLogWriterResponse)
	err := c.cc.Invoke(ctx, "/caraml.timber.v1.DatasetService/CreateLogWriter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateLogWriter(ctx context.Context, in *UpdateLogWriterRequest, opts ...grpc.CallOption) (*UpdateLogWriterResponse, error) {
	out := new(UpdateLogWriterResponse)
	err := c.cc.Invoke(ctx, "/caraml.timber.v1.DatasetService/UpdateLogWriter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) ListObservationServices(ctx context.Context, in *ListObservationServicesRequest, opts ...grpc.CallOption) (*ListObservationServicesResponse, error) {
	out := new(ListObservationServicesResponse)
	err := c.cc.Invoke(ctx, "/caraml.timber.v1.DatasetService/ListObservationServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetObservationService(ctx context.Context, in *GetObservationServiceRequest, opts ...grpc.CallOption) (*GetObservationServiceResponse, error) {
	out := new(GetObservationServiceResponse)
	err := c.cc.Invoke(ctx, "/caraml.timber.v1.DatasetService/GetObservationService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) CreateObservationService(ctx context.Context, in *CreateObservationServiceRequest, opts ...grpc.CallOption) (*CreateObservationServiceResponse, error) {
	out := new(CreateObservationServiceResponse)
	err := c.cc.Invoke(ctx, "/caraml.timber.v1.DatasetService/CreateObservationService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateObservationService(ctx context.Context, in *UpdateObservationServiceRequest, opts ...grpc.CallOption) (*UpdateObservationServiceResponse, error) {
	out := new(UpdateObservationServiceResponse)
	err := c.cc.Invoke(ctx, "/caraml.timber.v1.DatasetService/UpdateObservationService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetServiceServer is the server API for DatasetService service.
// All implementations should embed UnimplementedDatasetServiceServer
// for forward compatibility
type DatasetServiceServer interface {
	// ListLogMetadata return paginated list of log metadata under a project and filtered by query string.
	ListLogMetadata(context.Context, *ListLogMetadataRequest) (*ListLogMetadataResponse, error)
	// GetLogMetadata returns metadata of a log.
	GetLogMetadata(context.Context, *GetLogMetadataRequest) (*GetLogMetadataResponse, error)
	// ListLogWriters return paginated list of log writers under a project and filtered by query string.
	ListLogWriters(context.Context, *ListLogWritersRequest) (*ListLogWritersResponse, error)
	// GetLogWriter return details of the log writer deployment.
	GetLogWriter(context.Context, *GetLogWriterRequest) (*GetLogWriterResponse, error)
	// CreateLogWriter creates a new log writer deployment as specified by the details given in the request body.
	CreateLogWriter(context.Context, *CreateLogWriterRequest) (*CreateLogWriterResponse, error)
	// UpdateLogWriter updates an existing log writer deployment as specified by the details given in the request body.
	UpdateLogWriter(context.Context, *UpdateLogWriterRequest) (*UpdateLogWriterResponse, error)
	// ListObservationServices return paginated list of observation services under a project and filtered by query string.
	ListObservationServices(context.Context, *ListObservationServicesRequest) (*ListObservationServicesResponse, error)
	// GetObservationService return details of the observation service deployment.
	GetObservationService(context.Context, *GetObservationServiceRequest) (*GetObservationServiceResponse, error)
	// CreateObservationService creates a new observation service deployment as specified by the details given in the request body.
	CreateObservationService(context.Context, *CreateObservationServiceRequest) (*CreateObservationServiceResponse, error)
	// UpdateObservationService updates an existing observation service deployment as specified by the details given in the request body.
	UpdateObservationService(context.Context, *UpdateObservationServiceRequest) (*UpdateObservationServiceResponse, error)
}

// UnimplementedDatasetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDatasetServiceServer struct {
}

func (UnimplementedDatasetServiceServer) ListLogMetadata(context.Context, *ListLogMetadataRequest) (*ListLogMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLogMetadata not implemented")
}
func (UnimplementedDatasetServiceServer) GetLogMetadata(context.Context, *GetLogMetadataRequest) (*GetLogMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogMetadata not implemented")
}
func (UnimplementedDatasetServiceServer) ListLogWriters(context.Context, *ListLogWritersRequest) (*ListLogWritersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLogWriters not implemented")
}
func (UnimplementedDatasetServiceServer) GetLogWriter(context.Context, *GetLogWriterRequest) (*GetLogWriterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogWriter not implemented")
}
func (UnimplementedDatasetServiceServer) CreateLogWriter(context.Context, *CreateLogWriterRequest) (*CreateLogWriterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogWriter not implemented")
}
func (UnimplementedDatasetServiceServer) UpdateLogWriter(context.Context, *UpdateLogWriterRequest) (*UpdateLogWriterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLogWriter not implemented")
}
func (UnimplementedDatasetServiceServer) ListObservationServices(context.Context, *ListObservationServicesRequest) (*ListObservationServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObservationServices not implemented")
}
func (UnimplementedDatasetServiceServer) GetObservationService(context.Context, *GetObservationServiceRequest) (*GetObservationServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObservationService not implemented")
}
func (UnimplementedDatasetServiceServer) CreateObservationService(context.Context, *CreateObservationServiceRequest) (*CreateObservationServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObservationService not implemented")
}
func (UnimplementedDatasetServiceServer) UpdateObservationService(context.Context, *UpdateObservationServiceRequest) (*UpdateObservationServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObservationService not implemented")
}

// UnsafeDatasetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatasetServiceServer will
// result in compilation errors.
type UnsafeDatasetServiceServer interface {
	mustEmbedUnimplementedDatasetServiceServer()
}

func RegisterDatasetServiceServer(s grpc.ServiceRegistrar, srv DatasetServiceServer) {
	s.RegisterService(&DatasetService_ServiceDesc, srv)
}

func _DatasetService_ListLogMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLogMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).ListLogMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caraml.timber.v1.DatasetService/ListLogMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).ListLogMetadata(ctx, req.(*ListLogMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetLogMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetLogMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caraml.timber.v1.DatasetService/GetLogMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetLogMetadata(ctx, req.(*GetLogMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_ListLogWriters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLogWritersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).ListLogWriters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caraml.timber.v1.DatasetService/ListLogWriters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).ListLogWriters(ctx, req.(*ListLogWritersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetLogWriter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogWriterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetLogWriter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caraml.timber.v1.DatasetService/GetLogWriter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetLogWriter(ctx, req.(*GetLogWriterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_CreateLogWriter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogWriterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).CreateLogWriter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caraml.timber.v1.DatasetService/CreateLogWriter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).CreateLogWriter(ctx, req.(*CreateLogWriterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateLogWriter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLogWriterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateLogWriter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caraml.timber.v1.DatasetService/UpdateLogWriter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateLogWriter(ctx, req.(*UpdateLogWriterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_ListObservationServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObservationServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).ListObservationServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caraml.timber.v1.DatasetService/ListObservationServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).ListObservationServices(ctx, req.(*ListObservationServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetObservationService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObservationServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetObservationService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caraml.timber.v1.DatasetService/GetObservationService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetObservationService(ctx, req.(*GetObservationServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_CreateObservationService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObservationServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).CreateObservationService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caraml.timber.v1.DatasetService/CreateObservationService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).CreateObservationService(ctx, req.(*CreateObservationServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateObservationService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObservationServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateObservationService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caraml.timber.v1.DatasetService/UpdateObservationService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateObservationService(ctx, req.(*UpdateObservationServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatasetService_ServiceDesc is the grpc.ServiceDesc for DatasetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatasetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "caraml.timber.v1.DatasetService",
	HandlerType: (*DatasetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLogMetadata",
			Handler:    _DatasetService_ListLogMetadata_Handler,
		},
		{
			MethodName: "GetLogMetadata",
			Handler:    _DatasetService_GetLogMetadata_Handler,
		},
		{
			MethodName: "ListLogWriters",
			Handler:    _DatasetService_ListLogWriters_Handler,
		},
		{
			MethodName: "GetLogWriter",
			Handler:    _DatasetService_GetLogWriter_Handler,
		},
		{
			MethodName: "CreateLogWriter",
			Handler:    _DatasetService_CreateLogWriter_Handler,
		},
		{
			MethodName: "UpdateLogWriter",
			Handler:    _DatasetService_UpdateLogWriter_Handler,
		},
		{
			MethodName: "ListObservationServices",
			Handler:    _DatasetService_ListObservationServices_Handler,
		},
		{
			MethodName: "GetObservationService",
			Handler:    _DatasetService_GetObservationService_Handler,
		},
		{
			MethodName: "CreateObservationService",
			Handler:    _DatasetService_CreateObservationService_Handler,
		},
		{
			MethodName: "UpdateObservationService",
			Handler:    _DatasetService_UpdateObservationService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "caraml/timber/v1/dataset_service.proto",
}
