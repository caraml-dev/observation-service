// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        (unknown)
// source: caraml/timber/v1/dataset_service.proto

package api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for ListLogMetadata method.
type ListLogMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CaraML project ID to retrieve list of Log Metadata from.
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *ListLogMetadataRequest) Reset() {
	*x = ListLogMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLogMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogMetadataRequest) ProtoMessage() {}

func (x *ListLogMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogMetadataRequest.ProtoReflect.Descriptor instead.
func (*ListLogMetadataRequest) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListLogMetadataRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// Response message for ListLogMetadata method.
type ListLogMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Log metadata stored in configured Dataset Service storage sink.
	LogMetadata []*LogMetadata `protobuf:"bytes,1,rep,name=log_metadata,json=logMetadata,proto3" json:"log_metadata,omitempty"`
}

func (x *ListLogMetadataResponse) Reset() {
	*x = ListLogMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLogMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogMetadataResponse) ProtoMessage() {}

func (x *ListLogMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogMetadataResponse.ProtoReflect.Descriptor instead.
func (*ListLogMetadataResponse) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListLogMetadataResponse) GetLogMetadata() []*LogMetadata {
	if x != nil {
		return x.LogMetadata
	}
	return nil
}

// Request message for GetLogMetadata method.
type GetLogMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CaraML project ID to retrieve Log Metadata from.
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The ID of the log metadata to retrieve.
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetLogMetadataRequest) Reset() {
	*x = GetLogMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogMetadataRequest) ProtoMessage() {}

func (x *GetLogMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetLogMetadataRequest) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetLogMetadataRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetLogMetadataRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for GetLogMetadata method.
type GetLogMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Single log metadata stored in configured Dataset Service storage sink.
	LogMetadata *LogMetadata `protobuf:"bytes,1,opt,name=log_metadata,json=logMetadata,proto3" json:"log_metadata,omitempty"`
}

func (x *GetLogMetadataResponse) Reset() {
	*x = GetLogMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogMetadataResponse) ProtoMessage() {}

func (x *GetLogMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetLogMetadataResponse) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetLogMetadataResponse) GetLogMetadata() *LogMetadata {
	if x != nil {
		return x.LogMetadata
	}
	return nil
}

// Request message for ListLogWriters method.
type ListLogWritersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CaraML project ID to retrieve list of Log Writers from.
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// List request details
	List *ListOption `protobuf:"bytes,2,opt,name=list,proto3" json:"list,omitempty"`
}

func (x *ListLogWritersRequest) Reset() {
	*x = ListLogWritersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLogWritersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogWritersRequest) ProtoMessage() {}

func (x *ListLogWritersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogWritersRequest.ProtoReflect.Descriptor instead.
func (*ListLogWritersRequest) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListLogWritersRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListLogWritersRequest) GetList() *ListOption {
	if x != nil {
		return x.List
	}
	return nil
}

// Response message for ListLogWriters method.
type ListLogWritersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Log Writers deployed by Dataset Service for a particular CaraML project.
	LogWriters []*LogWriter `protobuf:"bytes,1,rep,name=log_writers,json=logWriters,proto3" json:"log_writers,omitempty"`
}

func (x *ListLogWritersResponse) Reset() {
	*x = ListLogWritersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLogWritersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogWritersResponse) ProtoMessage() {}

func (x *ListLogWritersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogWritersResponse.ProtoReflect.Descriptor instead.
func (*ListLogWritersResponse) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListLogWritersResponse) GetLogWriters() []*LogWriter {
	if x != nil {
		return x.LogWriters
	}
	return nil
}

// Request message for GetLogWriter method.
type GetLogWriterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CaraML project ID to retrieve the Log Writer from.
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The ID of the Log Writer resource to retrieve.
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetLogWriterRequest) Reset() {
	*x = GetLogWriterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogWriterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogWriterRequest) ProtoMessage() {}

func (x *GetLogWriterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogWriterRequest.ProtoReflect.Descriptor instead.
func (*GetLogWriterRequest) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetLogWriterRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetLogWriterRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for GetLogWriter method.
type GetLogWriterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details of single Log Writer deployed by Dataset Service.
	LogWriter *LogWriter `protobuf:"bytes,1,opt,name=log_writer,json=logWriter,proto3" json:"log_writer,omitempty"`
}

func (x *GetLogWriterResponse) Reset() {
	*x = GetLogWriterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogWriterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogWriterResponse) ProtoMessage() {}

func (x *GetLogWriterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogWriterResponse.ProtoReflect.Descriptor instead.
func (*GetLogWriterResponse) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetLogWriterResponse) GetLogWriter() *LogWriter {
	if x != nil {
		return x.LogWriter
	}
	return nil
}

// Request message for CreateLogWriter method.
type CreateLogWriterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CaraML project ID that will own the new Log Writer.
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Details of single Log Writer to be deployed by Dataset Service.
	LogWriter *LogWriter `protobuf:"bytes,2,opt,name=log_writer,json=logWriter,proto3" json:"log_writer,omitempty"`
}

func (x *CreateLogWriterRequest) Reset() {
	*x = CreateLogWriterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLogWriterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLogWriterRequest) ProtoMessage() {}

func (x *CreateLogWriterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLogWriterRequest.ProtoReflect.Descriptor instead.
func (*CreateLogWriterRequest) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{8}
}

func (x *CreateLogWriterRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateLogWriterRequest) GetLogWriter() *LogWriter {
	if x != nil {
		return x.LogWriter
	}
	return nil
}

// Response message for CreateLogWriter method.
type CreateLogWriterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details of single Log Writer deployed by Dataset Service.
	LogWriter *LogWriter `protobuf:"bytes,1,opt,name=log_writer,json=logWriter,proto3" json:"log_writer,omitempty"`
}

func (x *CreateLogWriterResponse) Reset() {
	*x = CreateLogWriterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLogWriterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLogWriterResponse) ProtoMessage() {}

func (x *CreateLogWriterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLogWriterResponse.ProtoReflect.Descriptor instead.
func (*CreateLogWriterResponse) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{9}
}

func (x *CreateLogWriterResponse) GetLogWriter() *LogWriter {
	if x != nil {
		return x.LogWriter
	}
	return nil
}

// Request message for UpdateLogWriter method.
type UpdateLogWriterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CaraML project ID that owns the Log Writer to be updated.
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The ID of Log Writer to update.
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// Details of single Log Writer to be updated by Dataset Service.
	LogWriter *LogWriter `protobuf:"bytes,3,opt,name=log_writer,json=logWriter,proto3" json:"log_writer,omitempty"`
}

func (x *UpdateLogWriterRequest) Reset() {
	*x = UpdateLogWriterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLogWriterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLogWriterRequest) ProtoMessage() {}

func (x *UpdateLogWriterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLogWriterRequest.ProtoReflect.Descriptor instead.
func (*UpdateLogWriterRequest) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateLogWriterRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateLogWriterRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateLogWriterRequest) GetLogWriter() *LogWriter {
	if x != nil {
		return x.LogWriter
	}
	return nil
}

// Response message for UpdateLogWriter method.
type UpdateLogWriterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details of single Log Writer updated by Dataset Service.
	LogWriter *LogWriter `protobuf:"bytes,1,opt,name=log_writer,json=logWriter,proto3" json:"log_writer,omitempty"`
}

func (x *UpdateLogWriterResponse) Reset() {
	*x = UpdateLogWriterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLogWriterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLogWriterResponse) ProtoMessage() {}

func (x *UpdateLogWriterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLogWriterResponse.ProtoReflect.Descriptor instead.
func (*UpdateLogWriterResponse) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateLogWriterResponse) GetLogWriter() *LogWriter {
	if x != nil {
		return x.LogWriter
	}
	return nil
}

// Request message for ListObservationServices method.
type ListObservationServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CaraML project ID to retrieve list of Observation Services from.
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *ListObservationServicesRequest) Reset() {
	*x = ListObservationServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListObservationServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListObservationServicesRequest) ProtoMessage() {}

func (x *ListObservationServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListObservationServicesRequest.ProtoReflect.Descriptor instead.
func (*ListObservationServicesRequest) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListObservationServicesRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// Response message for ListObservationServices method.
type ListObservationServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Observation Services deployed by Dataset Service for a particular CaraML project.
	ObservationServices []*ObservationService `protobuf:"bytes,1,rep,name=observation_services,json=observationServices,proto3" json:"observation_services,omitempty"`
}

func (x *ListObservationServicesResponse) Reset() {
	*x = ListObservationServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListObservationServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListObservationServicesResponse) ProtoMessage() {}

func (x *ListObservationServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListObservationServicesResponse.ProtoReflect.Descriptor instead.
func (*ListObservationServicesResponse) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListObservationServicesResponse) GetObservationServices() []*ObservationService {
	if x != nil {
		return x.ObservationServices
	}
	return nil
}

// Request message for GetObservationService method.
type GetObservationServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CaraML project ID to retrieve the Observation Service from.
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The ID of the Observation Service resource to retrieve.
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetObservationServiceRequest) Reset() {
	*x = GetObservationServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObservationServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObservationServiceRequest) ProtoMessage() {}

func (x *GetObservationServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObservationServiceRequest.ProtoReflect.Descriptor instead.
func (*GetObservationServiceRequest) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetObservationServiceRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetObservationServiceRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for GetObservationService method.
type GetObservationServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details of single Observation Service deployed by Dataset Service.
	ObservationService *ObservationService `protobuf:"bytes,1,opt,name=observation_service,json=observationService,proto3" json:"observation_service,omitempty"`
}

func (x *GetObservationServiceResponse) Reset() {
	*x = GetObservationServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObservationServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObservationServiceResponse) ProtoMessage() {}

func (x *GetObservationServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObservationServiceResponse.ProtoReflect.Descriptor instead.
func (*GetObservationServiceResponse) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetObservationServiceResponse) GetObservationService() *ObservationService {
	if x != nil {
		return x.ObservationService
	}
	return nil
}

// Request message for CreateObservationService method.
type CreateObservationServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CaraML project ID that will own the observation service.
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Details of single Observation Service to be deployed by Dataset Service.
	ObservationService *ObservationService `protobuf:"bytes,2,opt,name=observation_service,json=observationService,proto3" json:"observation_service,omitempty"`
}

func (x *CreateObservationServiceRequest) Reset() {
	*x = CreateObservationServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateObservationServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateObservationServiceRequest) ProtoMessage() {}

func (x *CreateObservationServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateObservationServiceRequest.ProtoReflect.Descriptor instead.
func (*CreateObservationServiceRequest) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{16}
}

func (x *CreateObservationServiceRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateObservationServiceRequest) GetObservationService() *ObservationService {
	if x != nil {
		return x.ObservationService
	}
	return nil
}

// Response message for CreateObservationService method.
type CreateObservationServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details of single Observation Service deployed by Dataset Service.
	ObservationService *ObservationService `protobuf:"bytes,1,opt,name=observation_service,json=observationService,proto3" json:"observation_service,omitempty"`
}

func (x *CreateObservationServiceResponse) Reset() {
	*x = CreateObservationServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateObservationServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateObservationServiceResponse) ProtoMessage() {}

func (x *CreateObservationServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateObservationServiceResponse.ProtoReflect.Descriptor instead.
func (*CreateObservationServiceResponse) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{17}
}

func (x *CreateObservationServiceResponse) GetObservationService() *ObservationService {
	if x != nil {
		return x.ObservationService
	}
	return nil
}

// Request message for UpdateObservationService method.
type UpdateObservationServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CaraML project ID that owns the Observation Service to be updated.
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The ID of Observation Service to update.
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// Details of single Observation Service to be updated by Dataset Service.
	ObservationService *ObservationService `protobuf:"bytes,3,opt,name=observation_service,json=observationService,proto3" json:"observation_service,omitempty"`
}

func (x *UpdateObservationServiceRequest) Reset() {
	*x = UpdateObservationServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateObservationServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateObservationServiceRequest) ProtoMessage() {}

func (x *UpdateObservationServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateObservationServiceRequest.ProtoReflect.Descriptor instead.
func (*UpdateObservationServiceRequest) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateObservationServiceRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateObservationServiceRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateObservationServiceRequest) GetObservationService() *ObservationService {
	if x != nil {
		return x.ObservationService
	}
	return nil
}

// Response message for UpdateObservationService method.
type UpdateObservationServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details of single Observation Service updated by Dataset Service.
	ObservationService *ObservationService `protobuf:"bytes,1,opt,name=observation_service,json=observationService,proto3" json:"observation_service,omitempty"`
}

func (x *UpdateObservationServiceResponse) Reset() {
	*x = UpdateObservationServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateObservationServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateObservationServiceResponse) ProtoMessage() {}

func (x *UpdateObservationServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateObservationServiceResponse.ProtoReflect.Descriptor instead.
func (*UpdateObservationServiceResponse) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateObservationServiceResponse) GetObservationService() *ObservationService {
	if x != nil {
		return x.ObservationService
	}
	return nil
}

type ListOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Offset of the list request
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// Number of entry to be returned by list request
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListOption) Reset() {
	*x = ListOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOption) ProtoMessage() {}

func (x *ListOption) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_dataset_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOption.ProtoReflect.Descriptor instead.
func (*ListOption) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_dataset_service_proto_rawDescGZIP(), []int{20}
}

func (x *ListOption) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListOption) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

var File_caraml_timber_v1_dataset_service_proto protoreflect.FileDescriptor

var file_caraml_timber_v1_dataset_service_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2f, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c,
	0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c,
	0x2f, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x63,
	0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2f, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x6f, 0x67, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2a, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2f, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e,
	0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x46, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x72,
	0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x68, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x56, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x6f,
	0x67, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x6c, 0x6f,
	0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x73, 0x22, 0x44, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x52,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x72,
	0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x22, 0x73, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x6c,
	0x6f, 0x67, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x22, 0x55, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e,
	0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x22, 0x83,
	0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x22, 0x55, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x52, 0x09, 0x6c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x1e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x1f,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x57, 0x0a, 0x14, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x76, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74,
	0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x12, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x97, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x55, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x79, 0x0a, 0x20, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a,
	0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x61, 0x72,
	0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x79,
	0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x3a, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x9c, 0x0d, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x2e, 0x63,
	0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e,
	0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x98, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12,
	0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x92, 0x01, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x27, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d,
	0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x91, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x12, 0x25, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x61, 0x72, 0x61,
	0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x98, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x63, 0x61, 0x72, 0x61,
	0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0x9d, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2f, 0x1a, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x67,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a,
	0x12, 0xb6, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x63,
	0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0xbc, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31,
	0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x2e, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0xc1, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x2e,
	0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x1a, 0x33, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x3a, 0x01, 0x2a, 0x42, 0xd4, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x72,
	0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x74, 0x69, 0x6d, 0x62,
	0x65, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2f, 0x74, 0x69,
	0x6d, 0x62, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x70, 0x69, 0xa2, 0x02, 0x03, 0x43, 0x54,
	0x58, 0xaa, 0x02, 0x10, 0x43, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x43, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x5c, 0x54, 0x69,
	0x6d, 0x62, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x43, 0x61, 0x72, 0x61, 0x6d, 0x6c,
	0x5c, 0x54, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x43, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x3a,
	0x3a, 0x54, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_caraml_timber_v1_dataset_service_proto_rawDescOnce sync.Once
	file_caraml_timber_v1_dataset_service_proto_rawDescData = file_caraml_timber_v1_dataset_service_proto_rawDesc
)

func file_caraml_timber_v1_dataset_service_proto_rawDescGZIP() []byte {
	file_caraml_timber_v1_dataset_service_proto_rawDescOnce.Do(func() {
		file_caraml_timber_v1_dataset_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_caraml_timber_v1_dataset_service_proto_rawDescData)
	})
	return file_caraml_timber_v1_dataset_service_proto_rawDescData
}

var file_caraml_timber_v1_dataset_service_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_caraml_timber_v1_dataset_service_proto_goTypes = []interface{}{
	(*ListLogMetadataRequest)(nil),           // 0: caraml.timber.v1.ListLogMetadataRequest
	(*ListLogMetadataResponse)(nil),          // 1: caraml.timber.v1.ListLogMetadataResponse
	(*GetLogMetadataRequest)(nil),            // 2: caraml.timber.v1.GetLogMetadataRequest
	(*GetLogMetadataResponse)(nil),           // 3: caraml.timber.v1.GetLogMetadataResponse
	(*ListLogWritersRequest)(nil),            // 4: caraml.timber.v1.ListLogWritersRequest
	(*ListLogWritersResponse)(nil),           // 5: caraml.timber.v1.ListLogWritersResponse
	(*GetLogWriterRequest)(nil),              // 6: caraml.timber.v1.GetLogWriterRequest
	(*GetLogWriterResponse)(nil),             // 7: caraml.timber.v1.GetLogWriterResponse
	(*CreateLogWriterRequest)(nil),           // 8: caraml.timber.v1.CreateLogWriterRequest
	(*CreateLogWriterResponse)(nil),          // 9: caraml.timber.v1.CreateLogWriterResponse
	(*UpdateLogWriterRequest)(nil),           // 10: caraml.timber.v1.UpdateLogWriterRequest
	(*UpdateLogWriterResponse)(nil),          // 11: caraml.timber.v1.UpdateLogWriterResponse
	(*ListObservationServicesRequest)(nil),   // 12: caraml.timber.v1.ListObservationServicesRequest
	(*ListObservationServicesResponse)(nil),  // 13: caraml.timber.v1.ListObservationServicesResponse
	(*GetObservationServiceRequest)(nil),     // 14: caraml.timber.v1.GetObservationServiceRequest
	(*GetObservationServiceResponse)(nil),    // 15: caraml.timber.v1.GetObservationServiceResponse
	(*CreateObservationServiceRequest)(nil),  // 16: caraml.timber.v1.CreateObservationServiceRequest
	(*CreateObservationServiceResponse)(nil), // 17: caraml.timber.v1.CreateObservationServiceResponse
	(*UpdateObservationServiceRequest)(nil),  // 18: caraml.timber.v1.UpdateObservationServiceRequest
	(*UpdateObservationServiceResponse)(nil), // 19: caraml.timber.v1.UpdateObservationServiceResponse
	(*ListOption)(nil),                       // 20: caraml.timber.v1.ListOption
	(*LogMetadata)(nil),                      // 21: caraml.timber.v1.LogMetadata
	(*LogWriter)(nil),                        // 22: caraml.timber.v1.LogWriter
	(*ObservationService)(nil),               // 23: caraml.timber.v1.ObservationService
}
var file_caraml_timber_v1_dataset_service_proto_depIdxs = []int32{
	21, // 0: caraml.timber.v1.ListLogMetadataResponse.log_metadata:type_name -> caraml.timber.v1.LogMetadata
	21, // 1: caraml.timber.v1.GetLogMetadataResponse.log_metadata:type_name -> caraml.timber.v1.LogMetadata
	20, // 2: caraml.timber.v1.ListLogWritersRequest.list:type_name -> caraml.timber.v1.ListOption
	22, // 3: caraml.timber.v1.ListLogWritersResponse.log_writers:type_name -> caraml.timber.v1.LogWriter
	22, // 4: caraml.timber.v1.GetLogWriterResponse.log_writer:type_name -> caraml.timber.v1.LogWriter
	22, // 5: caraml.timber.v1.CreateLogWriterRequest.log_writer:type_name -> caraml.timber.v1.LogWriter
	22, // 6: caraml.timber.v1.CreateLogWriterResponse.log_writer:type_name -> caraml.timber.v1.LogWriter
	22, // 7: caraml.timber.v1.UpdateLogWriterRequest.log_writer:type_name -> caraml.timber.v1.LogWriter
	22, // 8: caraml.timber.v1.UpdateLogWriterResponse.log_writer:type_name -> caraml.timber.v1.LogWriter
	23, // 9: caraml.timber.v1.ListObservationServicesResponse.observation_services:type_name -> caraml.timber.v1.ObservationService
	23, // 10: caraml.timber.v1.GetObservationServiceResponse.observation_service:type_name -> caraml.timber.v1.ObservationService
	23, // 11: caraml.timber.v1.CreateObservationServiceRequest.observation_service:type_name -> caraml.timber.v1.ObservationService
	23, // 12: caraml.timber.v1.CreateObservationServiceResponse.observation_service:type_name -> caraml.timber.v1.ObservationService
	23, // 13: caraml.timber.v1.UpdateObservationServiceRequest.observation_service:type_name -> caraml.timber.v1.ObservationService
	23, // 14: caraml.timber.v1.UpdateObservationServiceResponse.observation_service:type_name -> caraml.timber.v1.ObservationService
	0,  // 15: caraml.timber.v1.DatasetService.ListLogMetadata:input_type -> caraml.timber.v1.ListLogMetadataRequest
	2,  // 16: caraml.timber.v1.DatasetService.GetLogMetadata:input_type -> caraml.timber.v1.GetLogMetadataRequest
	4,  // 17: caraml.timber.v1.DatasetService.ListLogWriters:input_type -> caraml.timber.v1.ListLogWritersRequest
	6,  // 18: caraml.timber.v1.DatasetService.GetLogWriter:input_type -> caraml.timber.v1.GetLogWriterRequest
	8,  // 19: caraml.timber.v1.DatasetService.CreateLogWriter:input_type -> caraml.timber.v1.CreateLogWriterRequest
	10, // 20: caraml.timber.v1.DatasetService.UpdateLogWriter:input_type -> caraml.timber.v1.UpdateLogWriterRequest
	12, // 21: caraml.timber.v1.DatasetService.ListObservationServices:input_type -> caraml.timber.v1.ListObservationServicesRequest
	14, // 22: caraml.timber.v1.DatasetService.GetObservationService:input_type -> caraml.timber.v1.GetObservationServiceRequest
	16, // 23: caraml.timber.v1.DatasetService.CreateObservationService:input_type -> caraml.timber.v1.CreateObservationServiceRequest
	18, // 24: caraml.timber.v1.DatasetService.UpdateObservationService:input_type -> caraml.timber.v1.UpdateObservationServiceRequest
	1,  // 25: caraml.timber.v1.DatasetService.ListLogMetadata:output_type -> caraml.timber.v1.ListLogMetadataResponse
	3,  // 26: caraml.timber.v1.DatasetService.GetLogMetadata:output_type -> caraml.timber.v1.GetLogMetadataResponse
	5,  // 27: caraml.timber.v1.DatasetService.ListLogWriters:output_type -> caraml.timber.v1.ListLogWritersResponse
	7,  // 28: caraml.timber.v1.DatasetService.GetLogWriter:output_type -> caraml.timber.v1.GetLogWriterResponse
	9,  // 29: caraml.timber.v1.DatasetService.CreateLogWriter:output_type -> caraml.timber.v1.CreateLogWriterResponse
	11, // 30: caraml.timber.v1.DatasetService.UpdateLogWriter:output_type -> caraml.timber.v1.UpdateLogWriterResponse
	13, // 31: caraml.timber.v1.DatasetService.ListObservationServices:output_type -> caraml.timber.v1.ListObservationServicesResponse
	15, // 32: caraml.timber.v1.DatasetService.GetObservationService:output_type -> caraml.timber.v1.GetObservationServiceResponse
	17, // 33: caraml.timber.v1.DatasetService.CreateObservationService:output_type -> caraml.timber.v1.CreateObservationServiceResponse
	19, // 34: caraml.timber.v1.DatasetService.UpdateObservationService:output_type -> caraml.timber.v1.UpdateObservationServiceResponse
	25, // [25:35] is the sub-list for method output_type
	15, // [15:25] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_caraml_timber_v1_dataset_service_proto_init() }
func file_caraml_timber_v1_dataset_service_proto_init() {
	if File_caraml_timber_v1_dataset_service_proto != nil {
		return
	}
	file_caraml_timber_v1_log_metadata_proto_init()
	file_caraml_timber_v1_log_writer_proto_init()
	file_caraml_timber_v1_observation_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_caraml_timber_v1_dataset_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogWritersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogWritersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogWriterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogWriterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLogWriterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLogWriterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLogWriterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLogWriterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListObservationServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListObservationServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObservationServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObservationServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateObservationServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateObservationServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateObservationServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateObservationServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_dataset_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_caraml_timber_v1_dataset_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_caraml_timber_v1_dataset_service_proto_goTypes,
		DependencyIndexes: file_caraml_timber_v1_dataset_service_proto_depIdxs,
		MessageInfos:      file_caraml_timber_v1_dataset_service_proto_msgTypes,
	}.Build()
	File_caraml_timber_v1_dataset_service_proto = out.File
	file_caraml_timber_v1_dataset_service_proto_rawDesc = nil
	file_caraml_timber_v1_dataset_service_proto_goTypes = nil
	file_caraml_timber_v1_dataset_service_proto_depIdxs = nil
}
