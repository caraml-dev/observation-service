// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        (unknown)
// source: caraml/timber/v1/log.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LogType supported by UPI
type LogType int32

const (
	LogType_LOG_TYPE_UNSPECIFIED LogType = 0
	// Log from Prediction service
	LogType_LOG_TYPE_PREDICTION LogType = 1
	// Log from Observation service
	LogType_LOG_TYPE_OBSERVATION LogType = 2
	// Log from Router service
	LogType_LOG_TYPE_ROUTER LogType = 3
)

// Enum value maps for LogType.
var (
	LogType_name = map[int32]string{
		0: "LOG_TYPE_UNSPECIFIED",
		1: "LOG_TYPE_PREDICTION",
		2: "LOG_TYPE_OBSERVATION",
		3: "LOG_TYPE_ROUTER",
	}
	LogType_value = map[string]int32{
		"LOG_TYPE_UNSPECIFIED": 0,
		"LOG_TYPE_PREDICTION":  1,
		"LOG_TYPE_OBSERVATION": 2,
		"LOG_TYPE_ROUTER":      3,
	}
)

func (x LogType) Enum() *LogType {
	p := new(LogType)
	*p = x
	return p
}

func (x LogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogType) Descriptor() protoreflect.EnumDescriptor {
	return file_caraml_timber_v1_log_proto_enumTypes[0].Descriptor()
}

func (LogType) Type() protoreflect.EnumType {
	return &file_caraml_timber_v1_log_proto_enumTypes[0]
}

func (x LogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogType.Descriptor instead.
func (LogType) EnumDescriptor() ([]byte, []int) {
	return file_caraml_timber_v1_log_proto_rawDescGZIP(), []int{0}
}

// Data sink where logs would be flushed to via Fluentd
type FluentdOutputType int32

const (
	FluentdOutputType_FLUENTD_OUTPUT_TYPE_UNSPECIFIED FluentdOutputType = 0
	// Fluentd will publish logs to standard output
	FluentdOutputType_FLUENTD_OUTPUT_TYPE_STDOUT FluentdOutputType = 1
	// Fluentd will flush logs to BigQuery
	FluentdOutputType_FLUENTD_OUTPUT_TYPE_BQ FluentdOutputType = 2
)

// Enum value maps for FluentdOutputType.
var (
	FluentdOutputType_name = map[int32]string{
		0: "FLUENTD_OUTPUT_TYPE_UNSPECIFIED",
		1: "FLUENTD_OUTPUT_TYPE_STDOUT",
		2: "FLUENTD_OUTPUT_TYPE_BQ",
	}
	FluentdOutputType_value = map[string]int32{
		"FLUENTD_OUTPUT_TYPE_UNSPECIFIED": 0,
		"FLUENTD_OUTPUT_TYPE_STDOUT":      1,
		"FLUENTD_OUTPUT_TYPE_BQ":          2,
	}
)

func (x FluentdOutputType) Enum() *FluentdOutputType {
	p := new(FluentdOutputType)
	*p = x
	return p
}

func (x FluentdOutputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FluentdOutputType) Descriptor() protoreflect.EnumDescriptor {
	return file_caraml_timber_v1_log_proto_enumTypes[1].Descriptor()
}

func (FluentdOutputType) Type() protoreflect.EnumType {
	return &file_caraml_timber_v1_log_proto_enumTypes[1]
}

func (x FluentdOutputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FluentdOutputType.Descriptor instead.
func (FluentdOutputType) EnumDescriptor() ([]byte, []int) {
	return file_caraml_timber_v1_log_proto_rawDescGZIP(), []int{1}
}

// Kafka initial offset config
type KafkaInitialOffset int32

const (
	KafkaInitialOffset_KAFKA_INITIAL_OFFSET_UNSPECIFIED KafkaInitialOffset = 0
	// Automatically reset the offset to the earliest offset
	KafkaInitialOffset_KAFKA_INITIAL_OFFSET_EARLIEST KafkaInitialOffset = 1
	// Automatically reset the offset to the latest offset
	KafkaInitialOffset_KAFKA_INITIAL_OFFSET_LATEST KafkaInitialOffset = 2
)

// Enum value maps for KafkaInitialOffset.
var (
	KafkaInitialOffset_name = map[int32]string{
		0: "KAFKA_INITIAL_OFFSET_UNSPECIFIED",
		1: "KAFKA_INITIAL_OFFSET_EARLIEST",
		2: "KAFKA_INITIAL_OFFSET_LATEST",
	}
	KafkaInitialOffset_value = map[string]int32{
		"KAFKA_INITIAL_OFFSET_UNSPECIFIED": 0,
		"KAFKA_INITIAL_OFFSET_EARLIEST":    1,
		"KAFKA_INITIAL_OFFSET_LATEST":      2,
	}
)

func (x KafkaInitialOffset) Enum() *KafkaInitialOffset {
	p := new(KafkaInitialOffset)
	*p = x
	return p
}

func (x KafkaInitialOffset) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KafkaInitialOffset) Descriptor() protoreflect.EnumDescriptor {
	return file_caraml_timber_v1_log_proto_enumTypes[2].Descriptor()
}

func (KafkaInitialOffset) Type() protoreflect.EnumType {
	return &file_caraml_timber_v1_log_proto_enumTypes[2]
}

func (x KafkaInitialOffset) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KafkaInitialOffset.Descriptor instead.
func (KafkaInitialOffset) EnumDescriptor() ([]byte, []int) {
	return file_caraml_timber_v1_log_proto_rawDescGZIP(), []int{2}
}

// LogProducer describes the service that generates the log
type LogProducer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the producer.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the producer, dependent on the type of the log.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Name of the CaraML project that hosts the producer.
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *LogProducer) Reset() {
	*x = LogProducer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogProducer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogProducer) ProtoMessage() {}

func (x *LogProducer) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogProducer.ProtoReflect.Descriptor instead.
func (*LogProducer) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_log_proto_rawDescGZIP(), []int{0}
}

func (x *LogProducer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LogProducer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogProducer) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// LogMetadata is an entity/metadata in Dataset Service that represents an append-only
// data produced by ingesting the observation, prediction, or router logs
type LogMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of a log generated by a LogProducer.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the log, generated by Dataset Service.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Source of the log.
	Type LogType `protobuf:"varint,3,opt,name=type,proto3,enum=caraml.timber.v1.LogType" json:"type,omitempty"`
	// List of target names associated with a log.
	TargetNames []string `protobuf:"bytes,4,rep,name=target_names,json=targetNames,proto3" json:"target_names,omitempty"`
	// BQ table ID where the data is stored.
	BqTable string `protobuf:"bytes,5,opt,name=bq_table,json=bqTable,proto3" json:"bq_table,omitempty"`
	// Details of LogProducer that generated a log.
	LogProducer *LogProducer `protobuf:"bytes,6,opt,name=log_producer,json=logProducer,proto3" json:"log_producer,omitempty"`
}

func (x *LogMetadata) Reset() {
	*x = LogMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMetadata) ProtoMessage() {}

func (x *LogMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMetadata.ProtoReflect.Descriptor instead.
func (*LogMetadata) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_log_proto_rawDescGZIP(), []int{1}
}

func (x *LogMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LogMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogMetadata) GetType() LogType {
	if x != nil {
		return x.Type
	}
	return LogType_LOG_TYPE_UNSPECIFIED
}

func (x *LogMetadata) GetTargetNames() []string {
	if x != nil {
		return x.TargetNames
	}
	return nil
}

func (x *LogMetadata) GetBqTable() string {
	if x != nil {
		return x.BqTable
	}
	return ""
}

func (x *LogMetadata) GetLogProducer() *LogProducer {
	if x != nil {
		return x.LogProducer
	}
	return nil
}

// Fluentd BQ Data sink configurations
type FluentdOutputBQConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GCP Project
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// GCP Dataset
	Dataset string `protobuf:"bytes,2,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// GCP Table
	Table string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *FluentdOutputBQConfig) Reset() {
	*x = FluentdOutputBQConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FluentdOutputBQConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FluentdOutputBQConfig) ProtoMessage() {}

func (x *FluentdOutputBQConfig) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FluentdOutputBQConfig.ProtoReflect.Descriptor instead.
func (*FluentdOutputBQConfig) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_log_proto_rawDescGZIP(), []int{2}
}

func (x *FluentdOutputBQConfig) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *FluentdOutputBQConfig) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *FluentdOutputBQConfig) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

// Fluentd Data sink configurations
type FluentdConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of Data Sink where Observation logs would be flushed to
	Type FluentdOutputType `protobuf:"varint,1,opt,name=type,proto3,enum=caraml.timber.v1.FluentdOutputType" json:"type,omitempty"`
	// Fluentd Host to connect to
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// Fluentd Port to connect to
	Port int32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Fluentd Tag to match messages
	Tag    string                 `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	Config *FluentdOutputBQConfig `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *FluentdConfig) Reset() {
	*x = FluentdConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FluentdConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FluentdConfig) ProtoMessage() {}

func (x *FluentdConfig) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FluentdConfig.ProtoReflect.Descriptor instead.
func (*FluentdConfig) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_log_proto_rawDescGZIP(), []int{3}
}

func (x *FluentdConfig) GetType() FluentdOutputType {
	if x != nil {
		return x.Type
	}
	return FluentdOutputType_FLUENTD_OUTPUT_TYPE_UNSPECIFIED
}

func (x *FluentdConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *FluentdConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *FluentdConfig) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *FluentdConfig) GetConfig() *FluentdOutputBQConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// Kafka configurations
type KafkaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kafka Brokers to connect to, comma-delimited, in the form of "<broker_host>:<broker_port>"
	Brokers string `protobuf:"bytes,1,opt,name=brokers,proto3" json:"brokers,omitempty"`
	// Kafka Topic to produce to/consume from
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// Largest record batch size allowed by Kafka (after compression if compression is enabled)
	MaxMessageBytes int64 `protobuf:"varint,3,opt,name=max_message_bytes,json=maxMessageBytes,proto3" json:"max_message_bytes,omitempty"`
	// The compression type for all data generated by the Producer
	CompressionType string `protobuf:"bytes,4,opt,name=compression_type,json=compressionType,proto3" json:"compression_type,omitempty"`
	// ConnectTimeoutMS is the maximum duration (ms) the Kafka Producer/Consumer will block for to get Metadata, before timing out
	ConnectionTimeout int32 `protobuf:"varint,5,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`
	// PollInterval is the maximum duration (ms) the Kafka Consumer will block for, before timing out
	PollInterval int32 `protobuf:"varint,6,opt,name=poll_interval,json=pollInterval,proto3" json:"poll_interval,omitempty"`
	// What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server
	OffsetReset KafkaInitialOffset `protobuf:"varint,7,opt,name=offset_reset,json=offsetReset,proto3,enum=caraml.timber.v1.KafkaInitialOffset" json:"offset_reset,omitempty"`
}

func (x *KafkaConfig) Reset() {
	*x = KafkaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caraml_timber_v1_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaConfig) ProtoMessage() {}

func (x *KafkaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_caraml_timber_v1_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaConfig.ProtoReflect.Descriptor instead.
func (*KafkaConfig) Descriptor() ([]byte, []int) {
	return file_caraml_timber_v1_log_proto_rawDescGZIP(), []int{4}
}

func (x *KafkaConfig) GetBrokers() string {
	if x != nil {
		return x.Brokers
	}
	return ""
}

func (x *KafkaConfig) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *KafkaConfig) GetMaxMessageBytes() int64 {
	if x != nil {
		return x.MaxMessageBytes
	}
	return 0
}

func (x *KafkaConfig) GetCompressionType() string {
	if x != nil {
		return x.CompressionType
	}
	return ""
}

func (x *KafkaConfig) GetConnectionTimeout() int32 {
	if x != nil {
		return x.ConnectionTimeout
	}
	return 0
}

func (x *KafkaConfig) GetPollInterval() int32 {
	if x != nil {
		return x.PollInterval
	}
	return 0
}

func (x *KafkaConfig) GetOffsetReset() KafkaInitialOffset {
	if x != nil {
		return x.OffsetReset
	}
	return KafkaInitialOffset_KAFKA_INITIAL_OFFSET_UNSPECIFIED
}

var File_caraml_timber_v1_log_proto protoreflect.FileDescriptor

var file_caraml_timber_v1_log_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2f, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x63, 0x61,
	0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x22, 0x4b,
	0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x0b,
	0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x71, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x71, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0c,
	0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x22, 0x61,
	0x0a, 0x15, 0x46, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42,
	0x51, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0xc3, 0x01, 0x0a, 0x0d, 0x46, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x64, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x3f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e,
	0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x75, 0x65, 0x6e, 0x74,
	0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x51, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xb1, 0x02, 0x0a, 0x0b, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x47, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d,
	0x6c, 0x2e, 0x74, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0b,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x2a, 0x6b, 0x0a, 0x07, 0x4c,
	0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45,
	0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x4f, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x74, 0x0a, 0x11, 0x46, 0x6c, 0x75, 0x65,
	0x6e, 0x74, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x1f, 0x46, 0x4c, 0x55, 0x45, 0x4e, 0x54, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x4c, 0x55, 0x45, 0x4e, 0x54, 0x44, 0x5f, 0x4f, 0x55,
	0x54, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x44, 0x4f, 0x55, 0x54,
	0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x4c, 0x55, 0x45, 0x4e, 0x54, 0x44, 0x5f, 0x4f, 0x55,
	0x54, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x51, 0x10, 0x02, 0x2a, 0x7e,
	0x0a, 0x12, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x20, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4b, 0x41,
	0x46, 0x4b, 0x41, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x4f, 0x46, 0x46, 0x53,
	0x45, 0x54, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x49, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x4f,
	0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x10, 0x02, 0x42, 0xc9,
	0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x74, 0x69,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x08, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x74, 0x69, 0x6d, 0x62, 0x65,
	0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2f, 0x74, 0x69, 0x6d,
	0x62, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x70, 0x69, 0xa2, 0x02, 0x03, 0x43, 0x54, 0x58,
	0xaa, 0x02, 0x10, 0x43, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x43, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x5c, 0x54, 0x69, 0x6d,
	0x62, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x43, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x5c,
	0x54, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x43, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x3a, 0x3a,
	0x54, 0x69, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_caraml_timber_v1_log_proto_rawDescOnce sync.Once
	file_caraml_timber_v1_log_proto_rawDescData = file_caraml_timber_v1_log_proto_rawDesc
)

func file_caraml_timber_v1_log_proto_rawDescGZIP() []byte {
	file_caraml_timber_v1_log_proto_rawDescOnce.Do(func() {
		file_caraml_timber_v1_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_caraml_timber_v1_log_proto_rawDescData)
	})
	return file_caraml_timber_v1_log_proto_rawDescData
}

var file_caraml_timber_v1_log_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_caraml_timber_v1_log_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_caraml_timber_v1_log_proto_goTypes = []interface{}{
	(LogType)(0),                  // 0: caraml.timber.v1.LogType
	(FluentdOutputType)(0),        // 1: caraml.timber.v1.FluentdOutputType
	(KafkaInitialOffset)(0),       // 2: caraml.timber.v1.KafkaInitialOffset
	(*LogProducer)(nil),           // 3: caraml.timber.v1.LogProducer
	(*LogMetadata)(nil),           // 4: caraml.timber.v1.LogMetadata
	(*FluentdOutputBQConfig)(nil), // 5: caraml.timber.v1.FluentdOutputBQConfig
	(*FluentdConfig)(nil),         // 6: caraml.timber.v1.FluentdConfig
	(*KafkaConfig)(nil),           // 7: caraml.timber.v1.KafkaConfig
}
var file_caraml_timber_v1_log_proto_depIdxs = []int32{
	0, // 0: caraml.timber.v1.LogMetadata.type:type_name -> caraml.timber.v1.LogType
	3, // 1: caraml.timber.v1.LogMetadata.log_producer:type_name -> caraml.timber.v1.LogProducer
	1, // 2: caraml.timber.v1.FluentdConfig.type:type_name -> caraml.timber.v1.FluentdOutputType
	5, // 3: caraml.timber.v1.FluentdConfig.config:type_name -> caraml.timber.v1.FluentdOutputBQConfig
	2, // 4: caraml.timber.v1.KafkaConfig.offset_reset:type_name -> caraml.timber.v1.KafkaInitialOffset
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_caraml_timber_v1_log_proto_init() }
func file_caraml_timber_v1_log_proto_init() {
	if File_caraml_timber_v1_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_caraml_timber_v1_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogProducer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FluentdOutputBQConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FluentdConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caraml_timber_v1_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_caraml_timber_v1_log_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_caraml_timber_v1_log_proto_goTypes,
		DependencyIndexes: file_caraml_timber_v1_log_proto_depIdxs,
		EnumInfos:         file_caraml_timber_v1_log_proto_enumTypes,
		MessageInfos:      file_caraml_timber_v1_log_proto_msgTypes,
	}.Build()
	File_caraml_timber_v1_log_proto = out.File
	file_caraml_timber_v1_log_proto_rawDesc = nil
	file_caraml_timber_v1_log_proto_goTypes = nil
	file_caraml_timber_v1_log_proto_depIdxs = nil
}
