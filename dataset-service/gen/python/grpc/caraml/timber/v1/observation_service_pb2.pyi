"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import caraml.timber.v1.log_pb2
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ObservationServiceDataSourceType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _ObservationServiceDataSourceTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ObservationServiceDataSourceType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    OBSERVATION_SERVICE_DATA_SOURCE_TYPE_UNSPECIFIED: _ObservationServiceDataSourceType.ValueType  # 0
    OBSERVATION_SERVICE_DATA_SOURCE_TYPE_EAGER: _ObservationServiceDataSourceType.ValueType  # 1
    """No-Op represents no need to fetch logs from any data source, this should be selected if
    Observation Service should be deployed for just the eager API
    """

    OBSERVATION_SERVICE_DATA_SOURCE_TYPE_KAFKA: _ObservationServiceDataSourceType.ValueType  # 2
    """Observation Service will poll logs from a Kafka source"""

class ObservationServiceDataSourceType(_ObservationServiceDataSourceType, metaclass=_ObservationServiceDataSourceTypeEnumTypeWrapper):
    """Data source where Observation logs should be retrieved from"""
    pass

OBSERVATION_SERVICE_DATA_SOURCE_TYPE_UNSPECIFIED: ObservationServiceDataSourceType.ValueType  # 0
OBSERVATION_SERVICE_DATA_SOURCE_TYPE_EAGER: ObservationServiceDataSourceType.ValueType  # 1
"""No-Op represents no need to fetch logs from any data source, this should be selected if
Observation Service should be deployed for just the eager API
"""

OBSERVATION_SERVICE_DATA_SOURCE_TYPE_KAFKA: ObservationServiceDataSourceType.ValueType  # 2
"""Observation Service will poll logs from a Kafka source"""

global___ObservationServiceDataSourceType = ObservationServiceDataSourceType


class _ObservationServiceDataSinkType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _ObservationServiceDataSinkTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ObservationServiceDataSinkType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    OBSERVATION_SERVICE_DATA_SINK_TYPE_UNSPECIFIED: _ObservationServiceDataSinkType.ValueType  # 0
    OBSERVATION_SERVICE_DATA_SINK_TYPE_NOOP: _ObservationServiceDataSinkType.ValueType  # 1
    """No-Op represents no need to flush logs to any data sink"""

    OBSERVATION_SERVICE_DATA_SINK_TYPE_STDOUT: _ObservationServiceDataSinkType.ValueType  # 2
    """Observation Service will publish logs to standard output"""

    OBSERVATION_SERVICE_DATA_SINK_TYPE_KAFKA: _ObservationServiceDataSinkType.ValueType  # 3
    """Observation Service will flush logs to a Kafka sink"""

    OBSERVATION_SERVICE_DATA_SINK_TYPE_FLUENTD: _ObservationServiceDataSinkType.ValueType  # 4
    """Observation Service will flush logs to Fluentd"""

class ObservationServiceDataSinkType(_ObservationServiceDataSinkType, metaclass=_ObservationServiceDataSinkTypeEnumTypeWrapper):
    """Data sink where Observation logs would be flushed to"""
    pass

OBSERVATION_SERVICE_DATA_SINK_TYPE_UNSPECIFIED: ObservationServiceDataSinkType.ValueType  # 0
OBSERVATION_SERVICE_DATA_SINK_TYPE_NOOP: ObservationServiceDataSinkType.ValueType  # 1
"""No-Op represents no need to flush logs to any data sink"""

OBSERVATION_SERVICE_DATA_SINK_TYPE_STDOUT: ObservationServiceDataSinkType.ValueType  # 2
"""Observation Service will publish logs to standard output"""

OBSERVATION_SERVICE_DATA_SINK_TYPE_KAFKA: ObservationServiceDataSinkType.ValueType  # 3
"""Observation Service will flush logs to a Kafka sink"""

OBSERVATION_SERVICE_DATA_SINK_TYPE_FLUENTD: ObservationServiceDataSinkType.ValueType  # 4
"""Observation Service will flush logs to Fluentd"""

global___ObservationServiceDataSinkType = ObservationServiceDataSinkType


class ObservationServiceDataSource(google.protobuf.message.Message):
    """Configurations of Data source where Observation logs should be retrieved from"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TYPE_FIELD_NUMBER: builtins.int
    KAFKA_CONFIG_FIELD_NUMBER: builtins.int
    type: global___ObservationServiceDataSourceType.ValueType
    @property
    def kafka_config(self) -> caraml.timber.v1.log_pb2.KafkaConfig: ...
    def __init__(self,
        *,
        type: global___ObservationServiceDataSourceType.ValueType = ...,
        kafka_config: typing.Optional[caraml.timber.v1.log_pb2.KafkaConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["kafka_config",b"kafka_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["kafka_config",b"kafka_config","type",b"type"]) -> None: ...
global___ObservationServiceDataSource = ObservationServiceDataSource

class ObservationServiceDataSink(google.protobuf.message.Message):
    """Configurations of Data sink where Observation logs would be flushed to"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TYPE_FIELD_NUMBER: builtins.int
    KAFKA_CONFIG_FIELD_NUMBER: builtins.int
    FLUENTD_CONFIG_FIELD_NUMBER: builtins.int
    type: global___ObservationServiceDataSinkType.ValueType
    @property
    def kafka_config(self) -> caraml.timber.v1.log_pb2.KafkaConfig: ...
    @property
    def fluentd_config(self) -> caraml.timber.v1.log_pb2.FluentdConfig: ...
    def __init__(self,
        *,
        type: global___ObservationServiceDataSinkType.ValueType = ...,
        kafka_config: typing.Optional[caraml.timber.v1.log_pb2.KafkaConfig] = ...,
        fluentd_config: typing.Optional[caraml.timber.v1.log_pb2.FluentdConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["fluentd_config",b"fluentd_config","kafka_config",b"kafka_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["fluentd_config",b"fluentd_config","kafka_config",b"kafka_config","type",b"type"]) -> None: ...
global___ObservationServiceDataSink = ObservationServiceDataSink

class ObservationServiceConfig(google.protobuf.message.Message):
    """ObservationService describes details of a Observation Service"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ID_FIELD_NUMBER: builtins.int
    SOURCE_FIELD_NUMBER: builtins.int
    SINK_FIELD_NUMBER: builtins.int
    id: typing.Text
    """Unique identifier of an Observation Service deployed by Dataset Service."""

    @property
    def source(self) -> global___ObservationServiceDataSource:
        """Configuration for pull-based Observation Service data source."""
        pass
    @property
    def sink(self) -> global___ObservationServiceDataSink:
        """Configuration for Observation Service data sink."""
        pass
    def __init__(self,
        *,
        id: typing.Text = ...,
        source: typing.Optional[global___ObservationServiceDataSource] = ...,
        sink: typing.Optional[global___ObservationServiceDataSink] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["sink",b"sink","source",b"source"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["id",b"id","sink",b"sink","source",b"source"]) -> None: ...
global___ObservationServiceConfig = ObservationServiceConfig
