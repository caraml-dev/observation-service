"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import caraml.timber.v1.log_pb2
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _LogWriterType:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _LogWriterTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_LogWriterType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    LOG_WRITER_TYPE_UNSPECIFIED: _LogWriterType.ValueType  # 0
    LOG_WRITER_TYPE_FLUENTD: _LogWriterType.ValueType  # 1
    """Fluentd will be used for logging"""

class LogWriterType(_LogWriterType, metaclass=_LogWriterTypeEnumTypeWrapper):
    """Type of logging application for specified log"""
    pass

LOG_WRITER_TYPE_UNSPECIFIED: LogWriterType.ValueType  # 0
LOG_WRITER_TYPE_FLUENTD: LogWriterType.ValueType  # 1
"""Fluentd will be used for logging"""

global___LogWriterType = LogWriterType


class LogWriter(google.protobuf.message.Message):
    """LogWriter describes details of a Log Writer"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TYPE_FIELD_NUMBER: builtins.int
    FLUENTD_CONFIG_FIELD_NUMBER: builtins.int
    type: global___LogWriterType.ValueType
    @property
    def fluentd_config(self) -> caraml.timber.v1.log_pb2.FluentdConfig: ...
    def __init__(self,
        *,
        type: global___LogWriterType.ValueType = ...,
        fluentd_config: typing.Optional[caraml.timber.v1.log_pb2.FluentdConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["fluentd_config",b"fluentd_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["fluentd_config",b"fluentd_config","type",b"type"]) -> None: ...
global___LogWriter = LogWriter
