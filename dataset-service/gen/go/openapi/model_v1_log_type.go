/*
caraml/timber/v1/dataset_service.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V1LogType - LOG_TYPE_PREDICTION: Log from Prediction service  - LOG_TYPE_OBSERVATION: Log from Observation service  - LOG_TYPE_ROUTER: Log from Router service
type V1LogType string

// List of v1LogType
const (
	V1LOGTYPE_UNSPECIFIED V1LogType = "LOG_TYPE_UNSPECIFIED"
	V1LOGTYPE_PREDICTION V1LogType = "LOG_TYPE_PREDICTION"
	V1LOGTYPE_OBSERVATION V1LogType = "LOG_TYPE_OBSERVATION"
	V1LOGTYPE_ROUTER V1LogType = "LOG_TYPE_ROUTER"
)

// All allowed values of V1LogType enum
var AllowedV1LogTypeEnumValues = []V1LogType{
	"LOG_TYPE_UNSPECIFIED",
	"LOG_TYPE_PREDICTION",
	"LOG_TYPE_OBSERVATION",
	"LOG_TYPE_ROUTER",
}

func (v *V1LogType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1LogType(value)
	for _, existing := range AllowedV1LogTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1LogType", value)
}

// NewV1LogTypeFromValue returns a pointer to a valid V1LogType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1LogTypeFromValue(v string) (*V1LogType, error) {
	ev := V1LogType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1LogType: valid values are %v", v, AllowedV1LogTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1LogType) IsValid() bool {
	for _, existing := range AllowedV1LogTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1LogType value
func (v V1LogType) Ptr() *V1LogType {
	return &v
}

type NullableV1LogType struct {
	value *V1LogType
	isSet bool
}

func (v NullableV1LogType) Get() *V1LogType {
	return v.value
}

func (v *NullableV1LogType) Set(val *V1LogType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1LogType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1LogType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1LogType(val *V1LogType) *NullableV1LogType {
	return &NullableV1LogType{value: val, isSet: true}
}

func (v NullableV1LogType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1LogType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

