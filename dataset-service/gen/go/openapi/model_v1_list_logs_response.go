/*
caraml/timber/v1/dataset_service.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1ListLogsResponse Response message for ListLogs method.
type V1ListLogsResponse struct {
	// Logs stored in configured Dataset Service storage sink.
	Logs []V1Log `json:"logs,omitempty"`
}

// NewV1ListLogsResponse instantiates a new V1ListLogsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ListLogsResponse() *V1ListLogsResponse {
	this := V1ListLogsResponse{}
	return &this
}

// NewV1ListLogsResponseWithDefaults instantiates a new V1ListLogsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ListLogsResponseWithDefaults() *V1ListLogsResponse {
	this := V1ListLogsResponse{}
	return &this
}

// GetLogs returns the Logs field value if set, zero value otherwise.
func (o *V1ListLogsResponse) GetLogs() []V1Log {
	if o == nil || o.Logs == nil {
		var ret []V1Log
		return ret
	}
	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ListLogsResponse) GetLogsOk() ([]V1Log, bool) {
	if o == nil || o.Logs == nil {
		return nil, false
	}
	return o.Logs, true
}

// HasLogs returns a boolean if a field has been set.
func (o *V1ListLogsResponse) HasLogs() bool {
	if o != nil && o.Logs != nil {
		return true
	}

	return false
}

// SetLogs gets a reference to the given []V1Log and assigns it to the Logs field.
func (o *V1ListLogsResponse) SetLogs(v []V1Log) {
	o.Logs = v
}

func (o V1ListLogsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Logs != nil {
		toSerialize["logs"] = o.Logs
	}
	return json.Marshal(toSerialize)
}

type NullableV1ListLogsResponse struct {
	value *V1ListLogsResponse
	isSet bool
}

func (v NullableV1ListLogsResponse) Get() *V1ListLogsResponse {
	return v.value
}

func (v *NullableV1ListLogsResponse) Set(val *V1ListLogsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ListLogsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ListLogsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ListLogsResponse(val *V1ListLogsResponse) *NullableV1ListLogsResponse {
	return &NullableV1ListLogsResponse{value: val, isSet: true}
}

func (v NullableV1ListLogsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ListLogsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


