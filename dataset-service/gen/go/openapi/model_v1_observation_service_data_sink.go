/*
caraml/timber/v1/dataset_service.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1ObservationServiceDataSink struct for V1ObservationServiceDataSink
type V1ObservationServiceDataSink struct {
	Type *V1ObservationServiceDataSinkType `json:"type,omitempty"`
	KafkaConfig *V1KafkaConfig `json:"kafkaConfig,omitempty"`
	FluentdConfig *V1FluentdConfig `json:"fluentdConfig,omitempty"`
}

// NewV1ObservationServiceDataSink instantiates a new V1ObservationServiceDataSink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ObservationServiceDataSink() *V1ObservationServiceDataSink {
	this := V1ObservationServiceDataSink{}
	var type_ V1ObservationServiceDataSinkType = V1OBSERVATIONSERVICEDATASINKTYPE_UNSPECIFIED
	this.Type = &type_
	return &this
}

// NewV1ObservationServiceDataSinkWithDefaults instantiates a new V1ObservationServiceDataSink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ObservationServiceDataSinkWithDefaults() *V1ObservationServiceDataSink {
	this := V1ObservationServiceDataSink{}
	var type_ V1ObservationServiceDataSinkType = V1OBSERVATIONSERVICEDATASINKTYPE_UNSPECIFIED
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V1ObservationServiceDataSink) GetType() V1ObservationServiceDataSinkType {
	if o == nil || o.Type == nil {
		var ret V1ObservationServiceDataSinkType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObservationServiceDataSink) GetTypeOk() (*V1ObservationServiceDataSinkType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V1ObservationServiceDataSink) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given V1ObservationServiceDataSinkType and assigns it to the Type field.
func (o *V1ObservationServiceDataSink) SetType(v V1ObservationServiceDataSinkType) {
	o.Type = &v
}

// GetKafkaConfig returns the KafkaConfig field value if set, zero value otherwise.
func (o *V1ObservationServiceDataSink) GetKafkaConfig() V1KafkaConfig {
	if o == nil || o.KafkaConfig == nil {
		var ret V1KafkaConfig
		return ret
	}
	return *o.KafkaConfig
}

// GetKafkaConfigOk returns a tuple with the KafkaConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObservationServiceDataSink) GetKafkaConfigOk() (*V1KafkaConfig, bool) {
	if o == nil || o.KafkaConfig == nil {
		return nil, false
	}
	return o.KafkaConfig, true
}

// HasKafkaConfig returns a boolean if a field has been set.
func (o *V1ObservationServiceDataSink) HasKafkaConfig() bool {
	if o != nil && o.KafkaConfig != nil {
		return true
	}

	return false
}

// SetKafkaConfig gets a reference to the given V1KafkaConfig and assigns it to the KafkaConfig field.
func (o *V1ObservationServiceDataSink) SetKafkaConfig(v V1KafkaConfig) {
	o.KafkaConfig = &v
}

// GetFluentdConfig returns the FluentdConfig field value if set, zero value otherwise.
func (o *V1ObservationServiceDataSink) GetFluentdConfig() V1FluentdConfig {
	if o == nil || o.FluentdConfig == nil {
		var ret V1FluentdConfig
		return ret
	}
	return *o.FluentdConfig
}

// GetFluentdConfigOk returns a tuple with the FluentdConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObservationServiceDataSink) GetFluentdConfigOk() (*V1FluentdConfig, bool) {
	if o == nil || o.FluentdConfig == nil {
		return nil, false
	}
	return o.FluentdConfig, true
}

// HasFluentdConfig returns a boolean if a field has been set.
func (o *V1ObservationServiceDataSink) HasFluentdConfig() bool {
	if o != nil && o.FluentdConfig != nil {
		return true
	}

	return false
}

// SetFluentdConfig gets a reference to the given V1FluentdConfig and assigns it to the FluentdConfig field.
func (o *V1ObservationServiceDataSink) SetFluentdConfig(v V1FluentdConfig) {
	o.FluentdConfig = &v
}

func (o V1ObservationServiceDataSink) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.KafkaConfig != nil {
		toSerialize["kafkaConfig"] = o.KafkaConfig
	}
	if o.FluentdConfig != nil {
		toSerialize["fluentdConfig"] = o.FluentdConfig
	}
	return json.Marshal(toSerialize)
}

type NullableV1ObservationServiceDataSink struct {
	value *V1ObservationServiceDataSink
	isSet bool
}

func (v NullableV1ObservationServiceDataSink) Get() *V1ObservationServiceDataSink {
	return v.value
}

func (v *NullableV1ObservationServiceDataSink) Set(val *V1ObservationServiceDataSink) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ObservationServiceDataSink) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ObservationServiceDataSink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ObservationServiceDataSink(val *V1ObservationServiceDataSink) *NullableV1ObservationServiceDataSink {
	return &NullableV1ObservationServiceDataSink{value: val, isSet: true}
}

func (v NullableV1ObservationServiceDataSink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ObservationServiceDataSink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


