openapi: 3.0.1
info:
  title: caraml/timber/v1/dataset_service.proto
  version: version not set
servers:
- url: /
tags:
- name: DatasetService
paths:
  /v1/projects/{projectId}/log_metadata:
    get:
      operationId: DatasetService_ListLogMetadata
      parameters:
      - description: The CaraML project ID to retrieve log metadata from.
        in: path
        name: projectId
        required: true
        schema:
          format: int64
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListLogMetadataResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: ListLogs return paginated list of log metadata under a project and
        filtered by query string.
      tags:
      - DatasetService
  /v1/projects/{projectId}/log_metadata/{id}:
    get:
      operationId: DatasetService_GetLogMetadata
      parameters:
      - description: The CaraML project ID to retrieve log metadata from.
        in: path
        name: projectId
        required: true
        schema:
          format: int64
          type: string
      - description: The ID of the log metadata to retrieve.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetLogMetadataResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: GetLogMetadata returns metadata of a log.
      tags:
      - DatasetService
  /v1/projects/{projectId}/log_writers:
    get:
      operationId: DatasetService_ListLogWriters
      parameters:
      - description: The CaraML project ID to retrieve log resource from.
        in: path
        name: projectId
        required: true
        schema:
          format: int64
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListLogWritersResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: ListLogWriters return paginated list of log writers under a project
        and filtered by query string.
      tags:
      - DatasetService
    post:
      operationId: DatasetService_CreateLogWriter
      parameters:
      - description: The CaraML project ID to write log resource from.
        in: path
        name: projectId
        required: true
        schema:
          format: int64
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetService_CreateLogWriter_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateLogWriterResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: CreateLogWriter creates a new log writer deployment as specified by
        the details given in the request body.
      tags:
      - DatasetService
      x-codegen-request-body-name: body
  /v1/projects/{projectId}/log_writers/{id}:
    get:
      operationId: DatasetService_GetLogWriter
      parameters:
      - description: The CaraML project ID to write log resource from.
        in: path
        name: projectId
        required: true
        schema:
          format: int64
          type: string
      - description: The ID of the Log Writer resource to retrieve.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetLogWriterResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: GetLogWriter return details of the log writer deployment.
      tags:
      - DatasetService
    put:
      operationId: DatasetService_UpdateLogWriter
      parameters:
      - description: The CaraML project ID to write log resource from.
        in: path
        name: projectId
        required: true
        schema:
          format: int64
          type: string
      - description: The ID of Log Writer to update.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetService_UpdateLogWriter_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateLogWriterResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: UpdateLogWriter updates an existing log writer deployment as specified
        by the details given in the request body.
      tags:
      - DatasetService
      x-codegen-request-body-name: body
  /v1/projects/{projectId}/observation_services:
    get:
      operationId: DatasetService_ListObservationServices
      parameters:
      - description: The CaraML project ID to retrieve log resource from.
        in: path
        name: projectId
        required: true
        schema:
          format: int64
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListObservationServicesResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: ListObservationServices return paginated list of observation services
        under a project and filtered by query string.
      tags:
      - DatasetService
    post:
      operationId: DatasetService_CreateObservationService
      parameters:
      - description: The CaraML project ID to retrieve log resource from.
        in: path
        name: projectId
        required: true
        schema:
          format: int64
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetService_CreateObservationService_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateObservationServiceResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: CreateObservationService creates a new observation service deployment
        as specified by the details given in the request body.
      tags:
      - DatasetService
      x-codegen-request-body-name: body
  /v1/projects/{projectId}/observation_services/{id}:
    get:
      operationId: DatasetService_GetObservationService
      parameters:
      - description: The CaraML project ID to retrieve log resource from.
        in: path
        name: projectId
        required: true
        schema:
          format: int64
          type: string
      - description: The ID of the Observation Service resource to retrieve.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetObservationServiceResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: GetObservationService return details of the observation service deployment.
      tags:
      - DatasetService
    put:
      operationId: DatasetService_UpdateObservationService
      parameters:
      - description: The CaraML project ID to retrieve log resource from.
        in: path
        name: projectId
        required: true
        schema:
          format: int64
          type: string
      - description: The ID of Observation Service to update.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetService_UpdateObservationService_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateObservationServiceResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      summary: UpdateObservationService updates an existing observation service deployment
        as specified by the details given in the request body.
      tags:
      - DatasetService
      x-codegen-request-body-name: body
components:
  schemas:
    protobufAny:
      additionalProperties:
        type: object
      properties:
        '@type':
          type: string
      type: object
    rpcStatus:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
        details:
          items:
            $ref: '#/components/schemas/protobufAny'
          type: array
      type: object
    v1CreateLogWriterResponse:
      description: Response message for CreateLogWriter method.
      example:
        logWriter:
          fluentdConfig:
            port: 0
            host: host
            tag: tag
            type: null
            config:
              project: project
              dataset: dataset
              table: table
          type: null
      properties:
        logWriter:
          $ref: '#/components/schemas/v1LogWriter'
      type: object
    v1CreateObservationServiceResponse:
      description: Response message for CreateObservationService method.
      example:
        observationService:
          sink:
            fluentdConfig:
              port: 0
              host: host
              tag: tag
              type: null
              config:
                project: project
                dataset: dataset
                table: table
            kafkaConfig:
              pollInterval: 6
              brokers: brokers
              maxMessageBytes: maxMessageBytes
              topic: topic
              compressionType: compressionType
              connectionTimeout: 0
              offsetReset: null
            type: null
          id: id
          source:
            kafkaConfig:
              pollInterval: 6
              brokers: brokers
              maxMessageBytes: maxMessageBytes
              topic: topic
              compressionType: compressionType
              connectionTimeout: 0
              offsetReset: null
            type: null
      properties:
        observationService:
          $ref: '#/components/schemas/v1ObservationServiceConfig'
      type: object
    v1FluentdConfig:
      example:
        port: 0
        host: host
        tag: tag
        type: null
        config:
          project: project
          dataset: dataset
          table: table
      properties:
        type:
          $ref: '#/components/schemas/v1FluentdOutputType'
        host:
          title: Fluentd Host to connect to
          type: string
        port:
          format: int32
          title: Fluentd Port to connect to
          type: integer
        tag:
          title: Fluentd Tag to match messages
          type: string
        config:
          $ref: '#/components/schemas/v1FluentdOutputBQConfig'
      title: Fluentd Data sink configurations
      type: object
    v1FluentdOutputBQConfig:
      example:
        project: project
        dataset: dataset
        table: table
      properties:
        project:
          title: GCP Project
          type: string
        dataset:
          title: GCP Dataset
          type: string
        table:
          title: GCP Table
          type: string
      title: Fluentd BQ Data sink configurations
      type: object
    v1FluentdOutputType:
      default: FLUENTD_OUTPUT_TYPE_UNSPECIFIED
      description: "- FLUENTD_OUTPUT_TYPE_STDOUT: Fluentd will publish logs to standard\
        \ output\n - FLUENTD_OUTPUT_TYPE_BQ: Fluentd will flush logs to BigQuery"
      enum:
      - FLUENTD_OUTPUT_TYPE_UNSPECIFIED
      - FLUENTD_OUTPUT_TYPE_STDOUT
      - FLUENTD_OUTPUT_TYPE_BQ
      title: Data sink where logs would be flushed to via Fluentd
      type: string
    v1GetLogMetadataResponse:
      description: Response message for GetLogMetadata method.
      example:
        logMetadata:
          targetNames:
          - targetNames
          - targetNames
          logProducer:
            name: name
            project: project
            id: id
          name: name
          id: id
          type: null
          bqTable: bqTable
      properties:
        logMetadata:
          $ref: '#/components/schemas/v1LogMetadata'
      type: object
    v1GetLogWriterResponse:
      description: Response message for GetLogWriter method.
      example:
        logWriter:
          fluentdConfig:
            port: 0
            host: host
            tag: tag
            type: null
            config:
              project: project
              dataset: dataset
              table: table
          type: null
      properties:
        logWriter:
          $ref: '#/components/schemas/v1LogWriter'
      type: object
    v1GetObservationServiceResponse:
      description: Response message for GetObservationService method.
      example:
        observationService:
          sink:
            fluentdConfig:
              port: 0
              host: host
              tag: tag
              type: null
              config:
                project: project
                dataset: dataset
                table: table
            kafkaConfig:
              pollInterval: 6
              brokers: brokers
              maxMessageBytes: maxMessageBytes
              topic: topic
              compressionType: compressionType
              connectionTimeout: 0
              offsetReset: null
            type: null
          id: id
          source:
            kafkaConfig:
              pollInterval: 6
              brokers: brokers
              maxMessageBytes: maxMessageBytes
              topic: topic
              compressionType: compressionType
              connectionTimeout: 0
              offsetReset: null
            type: null
      properties:
        observationService:
          $ref: '#/components/schemas/v1ObservationServiceConfig'
      type: object
    v1KafkaConfig:
      example:
        pollInterval: 6
        brokers: brokers
        maxMessageBytes: maxMessageBytes
        topic: topic
        compressionType: compressionType
        connectionTimeout: 0
        offsetReset: null
      properties:
        brokers:
          title: "Kafka Brokers to connect to, comma-delimited, in the form of \"\
            <broker_host>:<broker_port>\""
          type: string
        topic:
          title: Kafka Topic to produce to/consume from
          type: string
        maxMessageBytes:
          format: int64
          title: Largest record batch size allowed by Kafka (after compression if
            compression is enabled)
          type: string
        compressionType:
          title: The compression type for all data generated by the Producer
          type: string
        connectionTimeout:
          format: int32
          title: "ConnectTimeoutMS is the maximum duration (ms) the Kafka Producer/Consumer\
            \ will block for to get Metadata, before timing out"
          type: integer
        pollInterval:
          format: int32
          title: "PollInterval is the maximum duration (ms) the Kafka Consumer will\
            \ block for, before timing out"
          type: integer
        offsetReset:
          $ref: '#/components/schemas/v1KafkaInitialOffset'
      title: Kafka configurations
      type: object
    v1KafkaInitialOffset:
      default: KAFKA_INITIAL_OFFSET_UNSPECIFIED
      description: "- KAFKA_INITIAL_OFFSET_EARLIEST: Automatically reset the offset\
        \ to the earliest offset\n - KAFKA_INITIAL_OFFSET_LATEST: Automatically reset\
        \ the offset to the latest offset"
      enum:
      - KAFKA_INITIAL_OFFSET_UNSPECIFIED
      - KAFKA_INITIAL_OFFSET_EARLIEST
      - KAFKA_INITIAL_OFFSET_LATEST
      title: Kafka initial offset config
      type: string
    v1ListLogMetadataResponse:
      description: Response message for ListLogMetadata method.
      example:
        logMetadata:
        - targetNames:
          - targetNames
          - targetNames
          logProducer:
            name: name
            project: project
            id: id
          name: name
          id: id
          type: null
          bqTable: bqTable
        - targetNames:
          - targetNames
          - targetNames
          logProducer:
            name: name
            project: project
            id: id
          name: name
          id: id
          type: null
          bqTable: bqTable
      properties:
        logMetadata:
          description: Log metadata stored in configured Dataset Service storage sink.
          items:
            $ref: '#/components/schemas/v1LogMetadata'
          type: array
      type: object
    v1ListLogWritersResponse:
      description: Response message for ListLogWriters method.
      example:
        logWriters:
        - fluentdConfig:
            port: 0
            host: host
            tag: tag
            type: null
            config:
              project: project
              dataset: dataset
              table: table
          type: null
        - fluentdConfig:
            port: 0
            host: host
            tag: tag
            type: null
            config:
              project: project
              dataset: dataset
              table: table
          type: null
      properties:
        logWriters:
          description: Log Writers deployed by Dataset Service for a particular CaraML
            project.
          items:
            $ref: '#/components/schemas/v1LogWriter'
          type: array
      type: object
    v1ListObservationServicesResponse:
      description: Response message for ListObservationServices method.
      example:
        observationServices:
        - sink:
            fluentdConfig:
              port: 0
              host: host
              tag: tag
              type: null
              config:
                project: project
                dataset: dataset
                table: table
            kafkaConfig:
              pollInterval: 6
              brokers: brokers
              maxMessageBytes: maxMessageBytes
              topic: topic
              compressionType: compressionType
              connectionTimeout: 0
              offsetReset: null
            type: null
          id: id
          source:
            kafkaConfig:
              pollInterval: 6
              brokers: brokers
              maxMessageBytes: maxMessageBytes
              topic: topic
              compressionType: compressionType
              connectionTimeout: 0
              offsetReset: null
            type: null
        - sink:
            fluentdConfig:
              port: 0
              host: host
              tag: tag
              type: null
              config:
                project: project
                dataset: dataset
                table: table
            kafkaConfig:
              pollInterval: 6
              brokers: brokers
              maxMessageBytes: maxMessageBytes
              topic: topic
              compressionType: compressionType
              connectionTimeout: 0
              offsetReset: null
            type: null
          id: id
          source:
            kafkaConfig:
              pollInterval: 6
              brokers: brokers
              maxMessageBytes: maxMessageBytes
              topic: topic
              compressionType: compressionType
              connectionTimeout: 0
              offsetReset: null
            type: null
      properties:
        observationServices:
          description: Observation Services deployed by Dataset Service for a particular
            CaraML project.
          items:
            $ref: '#/components/schemas/v1ObservationServiceConfig'
          type: array
      type: object
    v1LogMetadata:
      example:
        targetNames:
        - targetNames
        - targetNames
        logProducer:
          name: name
          project: project
          id: id
        name: name
        id: id
        type: null
        bqTable: bqTable
      properties:
        id:
          description: Unique identifier of a log generated by a LogProducer.
          type: string
        name:
          description: "Name of the log, generated by Dataset Service."
          type: string
        type:
          $ref: '#/components/schemas/v1LogType'
        targetNames:
          description: List of target names associated with a log.
          items:
            type: string
          type: array
        bqTable:
          description: BQ table ID where the data is stored.
          type: string
        logProducer:
          $ref: '#/components/schemas/v1LogProducer'
      title: "LogMetadata is an entity/metadata in Dataset Service that represents\
        \ an append-only\ndata produced by ingesting the observation, prediction,\
        \ or router logs"
      type: object
    v1LogProducer:
      example:
        name: name
        project: project
        id: id
      properties:
        id:
          description: Unique identifier of the producer.
          type: string
        name:
          description: "Name of the producer, dependent on the type of the log."
          type: string
        project:
          description: Name of the CaraML project that hosts the producer.
          type: string
      title: LogProducer describes the service that generates the log
      type: object
    v1LogType:
      default: LOG_TYPE_UNSPECIFIED
      description: "- LOG_TYPE_PREDICTION: Log from Prediction service\n - LOG_TYPE_OBSERVATION:\
        \ Log from Observation service\n - LOG_TYPE_ROUTER: Log from Router service"
      enum:
      - LOG_TYPE_UNSPECIFIED
      - LOG_TYPE_PREDICTION
      - LOG_TYPE_OBSERVATION
      - LOG_TYPE_ROUTER
      title: LogType supported by UPI
      type: string
    v1LogWriter:
      example:
        fluentdConfig:
          port: 0
          host: host
          tag: tag
          type: null
          config:
            project: project
            dataset: dataset
            table: table
        type: null
      properties:
        type:
          $ref: '#/components/schemas/v1LogWriterType'
        fluentdConfig:
          $ref: '#/components/schemas/v1FluentdConfig'
      title: LogWriter describes details of a Log Writer
      type: object
    v1LogWriterType:
      default: LOG_WRITER_TYPE_UNSPECIFIED
      description: "- LOG_WRITER_TYPE_FLUENTD: Fluentd will be used for logging"
      enum:
      - LOG_WRITER_TYPE_UNSPECIFIED
      - LOG_WRITER_TYPE_FLUENTD
      title: Type of logging application for specified log
      type: string
    v1ObservationServiceConfig:
      example:
        sink:
          fluentdConfig:
            port: 0
            host: host
            tag: tag
            type: null
            config:
              project: project
              dataset: dataset
              table: table
          kafkaConfig:
            pollInterval: 6
            brokers: brokers
            maxMessageBytes: maxMessageBytes
            topic: topic
            compressionType: compressionType
            connectionTimeout: 0
            offsetReset: null
          type: null
        id: id
        source:
          kafkaConfig:
            pollInterval: 6
            brokers: brokers
            maxMessageBytes: maxMessageBytes
            topic: topic
            compressionType: compressionType
            connectionTimeout: 0
            offsetReset: null
          type: null
      properties:
        id:
          description: Unique identifier of an Observation Service deployed by Dataset
            Service.
          type: string
        source:
          $ref: '#/components/schemas/v1ObservationServiceDataSource'
        sink:
          $ref: '#/components/schemas/v1ObservationServiceDataSink'
      title: ObservationService describes details of a Observation Service
      type: object
    v1ObservationServiceDataSink:
      example:
        fluentdConfig:
          port: 0
          host: host
          tag: tag
          type: null
          config:
            project: project
            dataset: dataset
            table: table
        kafkaConfig:
          pollInterval: 6
          brokers: brokers
          maxMessageBytes: maxMessageBytes
          topic: topic
          compressionType: compressionType
          connectionTimeout: 0
          offsetReset: null
        type: null
      properties:
        type:
          $ref: '#/components/schemas/v1ObservationServiceDataSinkType'
        kafkaConfig:
          $ref: '#/components/schemas/v1KafkaConfig'
        fluentdConfig:
          $ref: '#/components/schemas/v1FluentdConfig'
      title: Configurations of Data sink where Observation logs would be flushed to
      type: object
    v1ObservationServiceDataSinkType:
      default: OBSERVATION_SERVICE_DATA_SINK_TYPE_UNSPECIFIED
      description: "- OBSERVATION_SERVICE_DATA_SINK_TYPE_NOOP: No-Op represents no\
        \ need to flush logs to any data sink\n - OBSERVATION_SERVICE_DATA_SINK_TYPE_STDOUT:\
        \ Observation Service will publish logs to standard output\n - OBSERVATION_SERVICE_DATA_SINK_TYPE_KAFKA:\
        \ Observation Service will flush logs to a Kafka sink\n - OBSERVATION_SERVICE_DATA_SINK_TYPE_FLUENTD:\
        \ Observation Service will flush logs to Fluentd"
      enum:
      - OBSERVATION_SERVICE_DATA_SINK_TYPE_UNSPECIFIED
      - OBSERVATION_SERVICE_DATA_SINK_TYPE_NOOP
      - OBSERVATION_SERVICE_DATA_SINK_TYPE_STDOUT
      - OBSERVATION_SERVICE_DATA_SINK_TYPE_KAFKA
      - OBSERVATION_SERVICE_DATA_SINK_TYPE_FLUENTD
      title: Data sink where Observation logs would be flushed to
      type: string
    v1ObservationServiceDataSource:
      example:
        kafkaConfig:
          pollInterval: 6
          brokers: brokers
          maxMessageBytes: maxMessageBytes
          topic: topic
          compressionType: compressionType
          connectionTimeout: 0
          offsetReset: null
        type: null
      properties:
        type:
          $ref: '#/components/schemas/v1ObservationServiceDataSourceType'
        kafkaConfig:
          $ref: '#/components/schemas/v1KafkaConfig'
      title: Configurations of Data source where Observation logs should be retrieved
        from
      type: object
    v1ObservationServiceDataSourceType:
      default: OBSERVATION_SERVICE_DATA_SOURCE_TYPE_UNSPECIFIED
      description: "- OBSERVATION_SERVICE_DATA_SOURCE_TYPE_EAGER: No-Op represents\
        \ no need to fetch logs from any data source, this should be selected if\n\
        Observation Service should be deployed for just the eager API\n - OBSERVATION_SERVICE_DATA_SOURCE_TYPE_KAFKA:\
        \ Observation Service will poll logs from a Kafka source"
      enum:
      - OBSERVATION_SERVICE_DATA_SOURCE_TYPE_UNSPECIFIED
      - OBSERVATION_SERVICE_DATA_SOURCE_TYPE_EAGER
      - OBSERVATION_SERVICE_DATA_SOURCE_TYPE_KAFKA
      title: Data source where Observation logs should be retrieved from
      type: string
    v1UpdateLogWriterResponse:
      description: Response message for UpdateLogWriter method.
      example:
        logWriter:
          fluentdConfig:
            port: 0
            host: host
            tag: tag
            type: null
            config:
              project: project
              dataset: dataset
              table: table
          type: null
      properties:
        logWriter:
          $ref: '#/components/schemas/v1LogWriter'
      type: object
    v1UpdateObservationServiceResponse:
      description: Response message for UpdateObservationService method.
      example:
        observationService:
          sink:
            fluentdConfig:
              port: 0
              host: host
              tag: tag
              type: null
              config:
                project: project
                dataset: dataset
                table: table
            kafkaConfig:
              pollInterval: 6
              brokers: brokers
              maxMessageBytes: maxMessageBytes
              topic: topic
              compressionType: compressionType
              connectionTimeout: 0
              offsetReset: null
            type: null
          id: id
          source:
            kafkaConfig:
              pollInterval: 6
              brokers: brokers
              maxMessageBytes: maxMessageBytes
              topic: topic
              compressionType: compressionType
              connectionTimeout: 0
              offsetReset: null
            type: null
      properties:
        observationService:
          $ref: '#/components/schemas/v1ObservationServiceConfig'
      type: object
    DatasetService_CreateLogWriter_request:
      description: Request message for CreateLogWriter method.
      properties:
        logWriter:
          $ref: '#/components/schemas/v1LogWriter'
      type: object
    DatasetService_UpdateLogWriter_request:
      description: Request message for UpdateLogWriter method.
      properties:
        logWriter:
          $ref: '#/components/schemas/v1LogWriter'
      type: object
    DatasetService_CreateObservationService_request:
      description: Request message for CreateObservationService method.
      properties:
        observationService:
          $ref: '#/components/schemas/v1ObservationServiceConfig'
      type: object
    DatasetService_UpdateObservationService_request:
      description: Request message for UpdateObservationService method.
      properties:
        observationService:
          $ref: '#/components/schemas/v1ObservationServiceConfig'
      type: object
x-original-swagger-version: "2.0"
