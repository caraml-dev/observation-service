/*
 * caraml/timber/v1/dataset_service.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: version not set
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type V1ObservationServiceConfig struct {

	// Unique identifier of an Observation Service deployed by Dataset Service.
	Id string `json:"id,omitempty"`

	Source V1ObservationServiceDataSource `json:"source,omitempty"`

	Sink V1ObservationServiceDataSink `json:"sink,omitempty"`
}

// AssertV1ObservationServiceConfigRequired checks if the required fields are not zero-ed
func AssertV1ObservationServiceConfigRequired(obj V1ObservationServiceConfig) error {
	if err := AssertV1ObservationServiceDataSourceRequired(obj.Source); err != nil {
		return err
	}
	if err := AssertV1ObservationServiceDataSinkRequired(obj.Sink); err != nil {
		return err
	}
	return nil
}

// AssertRecurseV1ObservationServiceConfigRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of V1ObservationServiceConfig (e.g. [][]V1ObservationServiceConfig), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseV1ObservationServiceConfigRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aV1ObservationServiceConfig, ok := obj.(V1ObservationServiceConfig)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertV1ObservationServiceConfigRequired(aV1ObservationServiceConfig)
	})
}
