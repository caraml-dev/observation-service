/*
 * caraml/timber/v1/dataset_service.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: version not set
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi
// V1KafkaInitialOffset : - KAFKA_INITIAL_OFFSET_EARLIEST: Automatically reset the offset to the earliest offset  - KAFKA_INITIAL_OFFSET_LATEST: Automatically reset the offset to the latest offset
type V1KafkaInitialOffset string

// List of V1KafkaInitialOffset
const (
	V1KAFKAINITIALOFFSET_UNSPECIFIED V1KafkaInitialOffset = "KAFKA_INITIAL_OFFSET_UNSPECIFIED"
	V1KAFKAINITIALOFFSET_EARLIEST V1KafkaInitialOffset = "KAFKA_INITIAL_OFFSET_EARLIEST"
	V1KAFKAINITIALOFFSET_LATEST V1KafkaInitialOffset = "KAFKA_INITIAL_OFFSET_LATEST"
)

// AssertV1KafkaInitialOffsetRequired checks if the required fields are not zero-ed
func AssertV1KafkaInitialOffsetRequired(obj V1KafkaInitialOffset) error {
	return nil
}

// AssertRecurseV1KafkaInitialOffsetRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of V1KafkaInitialOffset (e.g. [][]V1KafkaInitialOffset), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseV1KafkaInitialOffsetRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aV1KafkaInitialOffset, ok := obj.(V1KafkaInitialOffset)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertV1KafkaInitialOffsetRequired(aV1KafkaInitialOffset)
	})
}
