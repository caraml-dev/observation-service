/*
 * caraml/timber/v1/dataset_service.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: version not set
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi
// V1ObservationServiceDataSourceType : - OBSERVATION_SERVICE_DATA_SOURCE_TYPE_EAGER: No-Op represents no need to fetch logs from any data source, this should be selected if Observation Service should be deployed for just the eager API  - OBSERVATION_SERVICE_DATA_SOURCE_TYPE_KAFKA: Observation Service will poll logs from a Kafka source
type V1ObservationServiceDataSourceType string

// List of V1ObservationServiceDataSourceType
const (
	V1OBSERVATIONSERVICEDATASOURCETYPE_UNSPECIFIED V1ObservationServiceDataSourceType = "OBSERVATION_SERVICE_DATA_SOURCE_TYPE_UNSPECIFIED"
	V1OBSERVATIONSERVICEDATASOURCETYPE_EAGER V1ObservationServiceDataSourceType = "OBSERVATION_SERVICE_DATA_SOURCE_TYPE_EAGER"
	V1OBSERVATIONSERVICEDATASOURCETYPE_KAFKA V1ObservationServiceDataSourceType = "OBSERVATION_SERVICE_DATA_SOURCE_TYPE_KAFKA"
)

// AssertV1ObservationServiceDataSourceTypeRequired checks if the required fields are not zero-ed
func AssertV1ObservationServiceDataSourceTypeRequired(obj V1ObservationServiceDataSourceType) error {
	return nil
}

// AssertRecurseV1ObservationServiceDataSourceTypeRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of V1ObservationServiceDataSourceType (e.g. [][]V1ObservationServiceDataSourceType), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseV1ObservationServiceDataSourceTypeRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aV1ObservationServiceDataSourceType, ok := obj.(V1ObservationServiceDataSourceType)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertV1ObservationServiceDataSourceTypeRequired(aV1ObservationServiceDataSourceType)
	})
}
