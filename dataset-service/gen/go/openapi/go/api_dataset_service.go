/*
 * caraml/timber/v1/dataset_service.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: version not set
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DatasetServiceApiController binds http requests to an api service and writes the service results to the http response
type DatasetServiceApiController struct {
	service DatasetServiceApiServicer
	errorHandler ErrorHandler
}

// DatasetServiceApiOption for how the controller is set up.
type DatasetServiceApiOption func(*DatasetServiceApiController)

// WithDatasetServiceApiErrorHandler inject ErrorHandler into controller
func WithDatasetServiceApiErrorHandler(h ErrorHandler) DatasetServiceApiOption {
	return func(c *DatasetServiceApiController) {
		c.errorHandler = h
	}
}

// NewDatasetServiceApiController creates a default api controller
func NewDatasetServiceApiController(s DatasetServiceApiServicer, opts ...DatasetServiceApiOption) Router {
	controller := &DatasetServiceApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DatasetServiceApiController
func (c *DatasetServiceApiController) Routes() Routes {
	return Routes{ 
		{
			"DatasetServiceCreateLogWriter",
			strings.ToUpper("Post"),
			"/v1/projects/{projectId}/log_writers",
			c.DatasetServiceCreateLogWriter,
		},
		{
			"DatasetServiceCreateObservationService",
			strings.ToUpper("Post"),
			"/v1/projects/{projectId}/observation_services",
			c.DatasetServiceCreateObservationService,
		},
		{
			"DatasetServiceGetLogMetadata",
			strings.ToUpper("Get"),
			"/v1/projects/{projectId}/log_metadata/{id}",
			c.DatasetServiceGetLogMetadata,
		},
		{
			"DatasetServiceGetLogWriter",
			strings.ToUpper("Get"),
			"/v1/projects/{projectId}/log_writers/{id}",
			c.DatasetServiceGetLogWriter,
		},
		{
			"DatasetServiceGetObservationService",
			strings.ToUpper("Get"),
			"/v1/projects/{projectId}/observation_services/{id}",
			c.DatasetServiceGetObservationService,
		},
		{
			"DatasetServiceListLogMetadata",
			strings.ToUpper("Get"),
			"/v1/projects/{projectId}/log_metadata",
			c.DatasetServiceListLogMetadata,
		},
		{
			"DatasetServiceListLogWriters",
			strings.ToUpper("Get"),
			"/v1/projects/{projectId}/log_writers",
			c.DatasetServiceListLogWriters,
		},
		{
			"DatasetServiceListObservationServices",
			strings.ToUpper("Get"),
			"/v1/projects/{projectId}/observation_services",
			c.DatasetServiceListObservationServices,
		},
		{
			"DatasetServiceUpdateLogWriter",
			strings.ToUpper("Put"),
			"/v1/projects/{projectId}/log_writers/{id}",
			c.DatasetServiceUpdateLogWriter,
		},
		{
			"DatasetServiceUpdateObservationService",
			strings.ToUpper("Put"),
			"/v1/projects/{projectId}/observation_services/{id}",
			c.DatasetServiceUpdateObservationService,
		},
	}
}

// DatasetServiceCreateLogWriter - CreateLogWriter creates a new log writer deployment as specified by the details given in the request body.
func (c *DatasetServiceApiController) DatasetServiceCreateLogWriter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	
	bodyParam := DatasetServiceCreateLogWriterRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDatasetServiceCreateLogWriterRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DatasetServiceCreateLogWriter(r.Context(), projectIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DatasetServiceCreateObservationService - CreateObservationService creates a new observation service deployment as specified by the details given in the request body.
func (c *DatasetServiceApiController) DatasetServiceCreateObservationService(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	
	bodyParam := DatasetServiceCreateObservationServiceRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDatasetServiceCreateObservationServiceRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DatasetServiceCreateObservationService(r.Context(), projectIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DatasetServiceGetLogMetadata - GetLogMetadata returns metadata of a log.
func (c *DatasetServiceApiController) DatasetServiceGetLogMetadata(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	
	idParam := params["id"]
	
	result, err := c.service.DatasetServiceGetLogMetadata(r.Context(), projectIdParam, idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DatasetServiceGetLogWriter - GetLogWriter return details of the log writer deployment.
func (c *DatasetServiceApiController) DatasetServiceGetLogWriter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	
	idParam := params["id"]
	
	result, err := c.service.DatasetServiceGetLogWriter(r.Context(), projectIdParam, idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DatasetServiceGetObservationService - GetObservationService return details of the observation service deployment.
func (c *DatasetServiceApiController) DatasetServiceGetObservationService(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	
	idParam := params["id"]
	
	result, err := c.service.DatasetServiceGetObservationService(r.Context(), projectIdParam, idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DatasetServiceListLogMetadata - ListLogs return paginated list of log metadata under a project and filtered by query string.
func (c *DatasetServiceApiController) DatasetServiceListLogMetadata(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	
	result, err := c.service.DatasetServiceListLogMetadata(r.Context(), projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DatasetServiceListLogWriters - ListLogWriters return paginated list of log writers under a project and filtered by query string.
func (c *DatasetServiceApiController) DatasetServiceListLogWriters(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	
	result, err := c.service.DatasetServiceListLogWriters(r.Context(), projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DatasetServiceListObservationServices - ListObservationServices return paginated list of observation services under a project and filtered by query string.
func (c *DatasetServiceApiController) DatasetServiceListObservationServices(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	
	result, err := c.service.DatasetServiceListObservationServices(r.Context(), projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DatasetServiceUpdateLogWriter - UpdateLogWriter updates an existing log writer deployment as specified by the details given in the request body.
func (c *DatasetServiceApiController) DatasetServiceUpdateLogWriter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	
	idParam := params["id"]
	
	bodyParam := DatasetServiceUpdateLogWriterRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDatasetServiceUpdateLogWriterRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DatasetServiceUpdateLogWriter(r.Context(), projectIdParam, idParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DatasetServiceUpdateObservationService - UpdateObservationService updates an existing observation service deployment as specified by the details given in the request body.
func (c *DatasetServiceApiController) DatasetServiceUpdateObservationService(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	
	idParam := params["id"]
	
	bodyParam := DatasetServiceUpdateObservationServiceRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDatasetServiceUpdateObservationServiceRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DatasetServiceUpdateObservationService(r.Context(), projectIdParam, idParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
