/*
caraml/timber/v1/dataset_service.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V1ObservationServiceDataSourceType - OBSERVATION_SERVICE_DATA_SOURCE_TYPE_EAGER: No-Op represents no need to fetch logs from any data source, this should be selected if Observation Service should be deployed for just the eager API  - OBSERVATION_SERVICE_DATA_SOURCE_TYPE_KAFKA: Observation Service will poll logs from a Kafka source
type V1ObservationServiceDataSourceType string

// List of v1ObservationServiceDataSourceType
const (
	V1OBSERVATIONSERVICEDATASOURCETYPE_UNSPECIFIED V1ObservationServiceDataSourceType = "OBSERVATION_SERVICE_DATA_SOURCE_TYPE_UNSPECIFIED"
	V1OBSERVATIONSERVICEDATASOURCETYPE_EAGER V1ObservationServiceDataSourceType = "OBSERVATION_SERVICE_DATA_SOURCE_TYPE_EAGER"
	V1OBSERVATIONSERVICEDATASOURCETYPE_KAFKA V1ObservationServiceDataSourceType = "OBSERVATION_SERVICE_DATA_SOURCE_TYPE_KAFKA"
)

// All allowed values of V1ObservationServiceDataSourceType enum
var AllowedV1ObservationServiceDataSourceTypeEnumValues = []V1ObservationServiceDataSourceType{
	"OBSERVATION_SERVICE_DATA_SOURCE_TYPE_UNSPECIFIED",
	"OBSERVATION_SERVICE_DATA_SOURCE_TYPE_EAGER",
	"OBSERVATION_SERVICE_DATA_SOURCE_TYPE_KAFKA",
}

func (v *V1ObservationServiceDataSourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1ObservationServiceDataSourceType(value)
	for _, existing := range AllowedV1ObservationServiceDataSourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1ObservationServiceDataSourceType", value)
}

// NewV1ObservationServiceDataSourceTypeFromValue returns a pointer to a valid V1ObservationServiceDataSourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1ObservationServiceDataSourceTypeFromValue(v string) (*V1ObservationServiceDataSourceType, error) {
	ev := V1ObservationServiceDataSourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1ObservationServiceDataSourceType: valid values are %v", v, AllowedV1ObservationServiceDataSourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1ObservationServiceDataSourceType) IsValid() bool {
	for _, existing := range AllowedV1ObservationServiceDataSourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1ObservationServiceDataSourceType value
func (v V1ObservationServiceDataSourceType) Ptr() *V1ObservationServiceDataSourceType {
	return &v
}

type NullableV1ObservationServiceDataSourceType struct {
	value *V1ObservationServiceDataSourceType
	isSet bool
}

func (v NullableV1ObservationServiceDataSourceType) Get() *V1ObservationServiceDataSourceType {
	return v.value
}

func (v *NullableV1ObservationServiceDataSourceType) Set(val *V1ObservationServiceDataSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ObservationServiceDataSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ObservationServiceDataSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ObservationServiceDataSourceType(val *V1ObservationServiceDataSourceType) *NullableV1ObservationServiceDataSourceType {
	return &NullableV1ObservationServiceDataSourceType{value: val, isSet: true}
}

func (v NullableV1ObservationServiceDataSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ObservationServiceDataSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

