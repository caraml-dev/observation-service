/*
caraml/timber/v1/dataset_service.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1FluentdConfig struct for V1FluentdConfig
type V1FluentdConfig struct {
	Type *V1FluentdOutputType `json:"type,omitempty"`
	Host *string `json:"host,omitempty"`
	Port *int32 `json:"port,omitempty"`
	Tag *string `json:"tag,omitempty"`
	Config *V1FluentdOutputBQConfig `json:"config,omitempty"`
}

// NewV1FluentdConfig instantiates a new V1FluentdConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1FluentdConfig() *V1FluentdConfig {
	this := V1FluentdConfig{}
	var type_ V1FluentdOutputType = V1FLUENTDOUTPUTTYPE_UNSPECIFIED
	this.Type = &type_
	return &this
}

// NewV1FluentdConfigWithDefaults instantiates a new V1FluentdConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1FluentdConfigWithDefaults() *V1FluentdConfig {
	this := V1FluentdConfig{}
	var type_ V1FluentdOutputType = V1FLUENTDOUTPUTTYPE_UNSPECIFIED
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V1FluentdConfig) GetType() V1FluentdOutputType {
	if o == nil || o.Type == nil {
		var ret V1FluentdOutputType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FluentdConfig) GetTypeOk() (*V1FluentdOutputType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V1FluentdConfig) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given V1FluentdOutputType and assigns it to the Type field.
func (o *V1FluentdConfig) SetType(v V1FluentdOutputType) {
	o.Type = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *V1FluentdConfig) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FluentdConfig) GetHostOk() (*string, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *V1FluentdConfig) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *V1FluentdConfig) SetHost(v string) {
	o.Host = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *V1FluentdConfig) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FluentdConfig) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *V1FluentdConfig) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *V1FluentdConfig) SetPort(v int32) {
	o.Port = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *V1FluentdConfig) GetTag() string {
	if o == nil || o.Tag == nil {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FluentdConfig) GetTagOk() (*string, bool) {
	if o == nil || o.Tag == nil {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *V1FluentdConfig) HasTag() bool {
	if o != nil && o.Tag != nil {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *V1FluentdConfig) SetTag(v string) {
	o.Tag = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *V1FluentdConfig) GetConfig() V1FluentdOutputBQConfig {
	if o == nil || o.Config == nil {
		var ret V1FluentdOutputBQConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FluentdConfig) GetConfigOk() (*V1FluentdOutputBQConfig, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *V1FluentdConfig) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given V1FluentdOutputBQConfig and assigns it to the Config field.
func (o *V1FluentdConfig) SetConfig(v V1FluentdOutputBQConfig) {
	o.Config = &v
}

func (o V1FluentdConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Host != nil {
		toSerialize["host"] = o.Host
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.Tag != nil {
		toSerialize["tag"] = o.Tag
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableV1FluentdConfig struct {
	value *V1FluentdConfig
	isSet bool
}

func (v NullableV1FluentdConfig) Get() *V1FluentdConfig {
	return v.value
}

func (v *NullableV1FluentdConfig) Set(val *V1FluentdConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableV1FluentdConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableV1FluentdConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1FluentdConfig(val *V1FluentdConfig) *NullableV1FluentdConfig {
	return &NullableV1FluentdConfig{value: val, isSet: true}
}

func (v NullableV1FluentdConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1FluentdConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


