/*
caraml/timber/v1/dataset_service.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1LogWriter struct for V1LogWriter
type V1LogWriter struct {
	Type *V1LogWriterType `json:"type,omitempty"`
	FluentdConfig *V1FluentdConfig `json:"fluentdConfig,omitempty"`
}

// NewV1LogWriter instantiates a new V1LogWriter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1LogWriter() *V1LogWriter {
	this := V1LogWriter{}
	var type_ V1LogWriterType = V1LOGWRITERTYPE_UNSPECIFIED
	this.Type = &type_
	return &this
}

// NewV1LogWriterWithDefaults instantiates a new V1LogWriter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1LogWriterWithDefaults() *V1LogWriter {
	this := V1LogWriter{}
	var type_ V1LogWriterType = V1LOGWRITERTYPE_UNSPECIFIED
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V1LogWriter) GetType() V1LogWriterType {
	if o == nil || o.Type == nil {
		var ret V1LogWriterType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1LogWriter) GetTypeOk() (*V1LogWriterType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V1LogWriter) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given V1LogWriterType and assigns it to the Type field.
func (o *V1LogWriter) SetType(v V1LogWriterType) {
	o.Type = &v
}

// GetFluentdConfig returns the FluentdConfig field value if set, zero value otherwise.
func (o *V1LogWriter) GetFluentdConfig() V1FluentdConfig {
	if o == nil || o.FluentdConfig == nil {
		var ret V1FluentdConfig
		return ret
	}
	return *o.FluentdConfig
}

// GetFluentdConfigOk returns a tuple with the FluentdConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1LogWriter) GetFluentdConfigOk() (*V1FluentdConfig, bool) {
	if o == nil || o.FluentdConfig == nil {
		return nil, false
	}
	return o.FluentdConfig, true
}

// HasFluentdConfig returns a boolean if a field has been set.
func (o *V1LogWriter) HasFluentdConfig() bool {
	if o != nil && o.FluentdConfig != nil {
		return true
	}

	return false
}

// SetFluentdConfig gets a reference to the given V1FluentdConfig and assigns it to the FluentdConfig field.
func (o *V1LogWriter) SetFluentdConfig(v V1FluentdConfig) {
	o.FluentdConfig = &v
}

func (o V1LogWriter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.FluentdConfig != nil {
		toSerialize["fluentdConfig"] = o.FluentdConfig
	}
	return json.Marshal(toSerialize)
}

type NullableV1LogWriter struct {
	value *V1LogWriter
	isSet bool
}

func (v NullableV1LogWriter) Get() *V1LogWriter {
	return v.value
}

func (v *NullableV1LogWriter) Set(val *V1LogWriter) {
	v.value = val
	v.isSet = true
}

func (v NullableV1LogWriter) IsSet() bool {
	return v.isSet
}

func (v *NullableV1LogWriter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1LogWriter(val *V1LogWriter) *NullableV1LogWriter {
	return &NullableV1LogWriter{value: val, isSet: true}
}

func (v NullableV1LogWriter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1LogWriter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


