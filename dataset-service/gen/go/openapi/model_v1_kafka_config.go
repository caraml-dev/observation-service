/*
caraml/timber/v1/dataset_service.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1KafkaConfig struct for V1KafkaConfig
type V1KafkaConfig struct {
	Brokers *string `json:"brokers,omitempty"`
	Topic *string `json:"topic,omitempty"`
	MaxMessageBytes *string `json:"maxMessageBytes,omitempty"`
	CompressionType *string `json:"compressionType,omitempty"`
	ConnectionTimeout *int32 `json:"connectionTimeout,omitempty"`
	PollInterval *int32 `json:"pollInterval,omitempty"`
	OffsetReset *V1KafkaInitialOffset `json:"offsetReset,omitempty"`
}

// NewV1KafkaConfig instantiates a new V1KafkaConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1KafkaConfig() *V1KafkaConfig {
	this := V1KafkaConfig{}
	var offsetReset V1KafkaInitialOffset = V1KAFKAINITIALOFFSET_UNSPECIFIED
	this.OffsetReset = &offsetReset
	return &this
}

// NewV1KafkaConfigWithDefaults instantiates a new V1KafkaConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1KafkaConfigWithDefaults() *V1KafkaConfig {
	this := V1KafkaConfig{}
	var offsetReset V1KafkaInitialOffset = V1KAFKAINITIALOFFSET_UNSPECIFIED
	this.OffsetReset = &offsetReset
	return &this
}

// GetBrokers returns the Brokers field value if set, zero value otherwise.
func (o *V1KafkaConfig) GetBrokers() string {
	if o == nil || o.Brokers == nil {
		var ret string
		return ret
	}
	return *o.Brokers
}

// GetBrokersOk returns a tuple with the Brokers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1KafkaConfig) GetBrokersOk() (*string, bool) {
	if o == nil || o.Brokers == nil {
		return nil, false
	}
	return o.Brokers, true
}

// HasBrokers returns a boolean if a field has been set.
func (o *V1KafkaConfig) HasBrokers() bool {
	if o != nil && o.Brokers != nil {
		return true
	}

	return false
}

// SetBrokers gets a reference to the given string and assigns it to the Brokers field.
func (o *V1KafkaConfig) SetBrokers(v string) {
	o.Brokers = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *V1KafkaConfig) GetTopic() string {
	if o == nil || o.Topic == nil {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1KafkaConfig) GetTopicOk() (*string, bool) {
	if o == nil || o.Topic == nil {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *V1KafkaConfig) HasTopic() bool {
	if o != nil && o.Topic != nil {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *V1KafkaConfig) SetTopic(v string) {
	o.Topic = &v
}

// GetMaxMessageBytes returns the MaxMessageBytes field value if set, zero value otherwise.
func (o *V1KafkaConfig) GetMaxMessageBytes() string {
	if o == nil || o.MaxMessageBytes == nil {
		var ret string
		return ret
	}
	return *o.MaxMessageBytes
}

// GetMaxMessageBytesOk returns a tuple with the MaxMessageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1KafkaConfig) GetMaxMessageBytesOk() (*string, bool) {
	if o == nil || o.MaxMessageBytes == nil {
		return nil, false
	}
	return o.MaxMessageBytes, true
}

// HasMaxMessageBytes returns a boolean if a field has been set.
func (o *V1KafkaConfig) HasMaxMessageBytes() bool {
	if o != nil && o.MaxMessageBytes != nil {
		return true
	}

	return false
}

// SetMaxMessageBytes gets a reference to the given string and assigns it to the MaxMessageBytes field.
func (o *V1KafkaConfig) SetMaxMessageBytes(v string) {
	o.MaxMessageBytes = &v
}

// GetCompressionType returns the CompressionType field value if set, zero value otherwise.
func (o *V1KafkaConfig) GetCompressionType() string {
	if o == nil || o.CompressionType == nil {
		var ret string
		return ret
	}
	return *o.CompressionType
}

// GetCompressionTypeOk returns a tuple with the CompressionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1KafkaConfig) GetCompressionTypeOk() (*string, bool) {
	if o == nil || o.CompressionType == nil {
		return nil, false
	}
	return o.CompressionType, true
}

// HasCompressionType returns a boolean if a field has been set.
func (o *V1KafkaConfig) HasCompressionType() bool {
	if o != nil && o.CompressionType != nil {
		return true
	}

	return false
}

// SetCompressionType gets a reference to the given string and assigns it to the CompressionType field.
func (o *V1KafkaConfig) SetCompressionType(v string) {
	o.CompressionType = &v
}

// GetConnectionTimeout returns the ConnectionTimeout field value if set, zero value otherwise.
func (o *V1KafkaConfig) GetConnectionTimeout() int32 {
	if o == nil || o.ConnectionTimeout == nil {
		var ret int32
		return ret
	}
	return *o.ConnectionTimeout
}

// GetConnectionTimeoutOk returns a tuple with the ConnectionTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1KafkaConfig) GetConnectionTimeoutOk() (*int32, bool) {
	if o == nil || o.ConnectionTimeout == nil {
		return nil, false
	}
	return o.ConnectionTimeout, true
}

// HasConnectionTimeout returns a boolean if a field has been set.
func (o *V1KafkaConfig) HasConnectionTimeout() bool {
	if o != nil && o.ConnectionTimeout != nil {
		return true
	}

	return false
}

// SetConnectionTimeout gets a reference to the given int32 and assigns it to the ConnectionTimeout field.
func (o *V1KafkaConfig) SetConnectionTimeout(v int32) {
	o.ConnectionTimeout = &v
}

// GetPollInterval returns the PollInterval field value if set, zero value otherwise.
func (o *V1KafkaConfig) GetPollInterval() int32 {
	if o == nil || o.PollInterval == nil {
		var ret int32
		return ret
	}
	return *o.PollInterval
}

// GetPollIntervalOk returns a tuple with the PollInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1KafkaConfig) GetPollIntervalOk() (*int32, bool) {
	if o == nil || o.PollInterval == nil {
		return nil, false
	}
	return o.PollInterval, true
}

// HasPollInterval returns a boolean if a field has been set.
func (o *V1KafkaConfig) HasPollInterval() bool {
	if o != nil && o.PollInterval != nil {
		return true
	}

	return false
}

// SetPollInterval gets a reference to the given int32 and assigns it to the PollInterval field.
func (o *V1KafkaConfig) SetPollInterval(v int32) {
	o.PollInterval = &v
}

// GetOffsetReset returns the OffsetReset field value if set, zero value otherwise.
func (o *V1KafkaConfig) GetOffsetReset() V1KafkaInitialOffset {
	if o == nil || o.OffsetReset == nil {
		var ret V1KafkaInitialOffset
		return ret
	}
	return *o.OffsetReset
}

// GetOffsetResetOk returns a tuple with the OffsetReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1KafkaConfig) GetOffsetResetOk() (*V1KafkaInitialOffset, bool) {
	if o == nil || o.OffsetReset == nil {
		return nil, false
	}
	return o.OffsetReset, true
}

// HasOffsetReset returns a boolean if a field has been set.
func (o *V1KafkaConfig) HasOffsetReset() bool {
	if o != nil && o.OffsetReset != nil {
		return true
	}

	return false
}

// SetOffsetReset gets a reference to the given V1KafkaInitialOffset and assigns it to the OffsetReset field.
func (o *V1KafkaConfig) SetOffsetReset(v V1KafkaInitialOffset) {
	o.OffsetReset = &v
}

func (o V1KafkaConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Brokers != nil {
		toSerialize["brokers"] = o.Brokers
	}
	if o.Topic != nil {
		toSerialize["topic"] = o.Topic
	}
	if o.MaxMessageBytes != nil {
		toSerialize["maxMessageBytes"] = o.MaxMessageBytes
	}
	if o.CompressionType != nil {
		toSerialize["compressionType"] = o.CompressionType
	}
	if o.ConnectionTimeout != nil {
		toSerialize["connectionTimeout"] = o.ConnectionTimeout
	}
	if o.PollInterval != nil {
		toSerialize["pollInterval"] = o.PollInterval
	}
	if o.OffsetReset != nil {
		toSerialize["offsetReset"] = o.OffsetReset
	}
	return json.Marshal(toSerialize)
}

type NullableV1KafkaConfig struct {
	value *V1KafkaConfig
	isSet bool
}

func (v NullableV1KafkaConfig) Get() *V1KafkaConfig {
	return v.value
}

func (v *NullableV1KafkaConfig) Set(val *V1KafkaConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableV1KafkaConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableV1KafkaConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1KafkaConfig(val *V1KafkaConfig) *NullableV1KafkaConfig {
	return &NullableV1KafkaConfig{value: val, isSet: true}
}

func (v NullableV1KafkaConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1KafkaConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


