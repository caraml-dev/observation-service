/*
caraml/timber/v1/dataset_service.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1ObservationServiceDataSource struct for V1ObservationServiceDataSource
type V1ObservationServiceDataSource struct {
	Type *V1ObservationServiceDataSourceType `json:"type,omitempty"`
	KafkaConfig *V1KafkaConfig `json:"kafkaConfig,omitempty"`
}

// NewV1ObservationServiceDataSource instantiates a new V1ObservationServiceDataSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ObservationServiceDataSource() *V1ObservationServiceDataSource {
	this := V1ObservationServiceDataSource{}
	var type_ V1ObservationServiceDataSourceType = V1OBSERVATIONSERVICEDATASOURCETYPE_UNSPECIFIED
	this.Type = &type_
	return &this
}

// NewV1ObservationServiceDataSourceWithDefaults instantiates a new V1ObservationServiceDataSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ObservationServiceDataSourceWithDefaults() *V1ObservationServiceDataSource {
	this := V1ObservationServiceDataSource{}
	var type_ V1ObservationServiceDataSourceType = V1OBSERVATIONSERVICEDATASOURCETYPE_UNSPECIFIED
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V1ObservationServiceDataSource) GetType() V1ObservationServiceDataSourceType {
	if o == nil || o.Type == nil {
		var ret V1ObservationServiceDataSourceType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObservationServiceDataSource) GetTypeOk() (*V1ObservationServiceDataSourceType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V1ObservationServiceDataSource) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given V1ObservationServiceDataSourceType and assigns it to the Type field.
func (o *V1ObservationServiceDataSource) SetType(v V1ObservationServiceDataSourceType) {
	o.Type = &v
}

// GetKafkaConfig returns the KafkaConfig field value if set, zero value otherwise.
func (o *V1ObservationServiceDataSource) GetKafkaConfig() V1KafkaConfig {
	if o == nil || o.KafkaConfig == nil {
		var ret V1KafkaConfig
		return ret
	}
	return *o.KafkaConfig
}

// GetKafkaConfigOk returns a tuple with the KafkaConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObservationServiceDataSource) GetKafkaConfigOk() (*V1KafkaConfig, bool) {
	if o == nil || o.KafkaConfig == nil {
		return nil, false
	}
	return o.KafkaConfig, true
}

// HasKafkaConfig returns a boolean if a field has been set.
func (o *V1ObservationServiceDataSource) HasKafkaConfig() bool {
	if o != nil && o.KafkaConfig != nil {
		return true
	}

	return false
}

// SetKafkaConfig gets a reference to the given V1KafkaConfig and assigns it to the KafkaConfig field.
func (o *V1ObservationServiceDataSource) SetKafkaConfig(v V1KafkaConfig) {
	o.KafkaConfig = &v
}

func (o V1ObservationServiceDataSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.KafkaConfig != nil {
		toSerialize["kafkaConfig"] = o.KafkaConfig
	}
	return json.Marshal(toSerialize)
}

type NullableV1ObservationServiceDataSource struct {
	value *V1ObservationServiceDataSource
	isSet bool
}

func (v NullableV1ObservationServiceDataSource) Get() *V1ObservationServiceDataSource {
	return v.value
}

func (v *NullableV1ObservationServiceDataSource) Set(val *V1ObservationServiceDataSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ObservationServiceDataSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ObservationServiceDataSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ObservationServiceDataSource(val *V1ObservationServiceDataSource) *NullableV1ObservationServiceDataSource {
	return &NullableV1ObservationServiceDataSource{value: val, isSet: true}
}

func (v NullableV1ObservationServiceDataSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ObservationServiceDataSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


