// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/caraml-dev/timber/dataset-service/model"

	storage "github.com/caraml-dev/timber/dataset-service/storage"
)

// ObservationService is an autogenerated mock type for the ObservationService type
type ObservationService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, lw
func (_m *ObservationService) Create(ctx context.Context, lw *model.ObservationService) (*model.ObservationService, error) {
	ret := _m.Called(ctx, lw)

	var r0 *model.ObservationService
	if rf, ok := ret.Get(0).(func(context.Context, *model.ObservationService) *model.ObservationService); ok {
		r0 = rf(ctx, lw)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ObservationService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.ObservationService) error); ok {
		r1 = rf(ctx, lw)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, input
func (_m *ObservationService) Get(ctx context.Context, input storage.GetInput) (*model.ObservationService, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.ObservationService
	if rf, ok := ret.Get(0).(func(context.Context, storage.GetInput) *model.ObservationService); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ObservationService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, storage.GetInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, listInput
func (_m *ObservationService) List(ctx context.Context, listInput storage.ListInput) ([]*model.ObservationService, error) {
	ret := _m.Called(ctx, listInput)

	var r0 []*model.ObservationService
	if rf, ok := ret.Get(0).(func(context.Context, storage.ListInput) []*model.ObservationService); ok {
		r0 = rf(ctx, listInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ObservationService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, storage.ListInput) error); ok {
		r1 = rf(ctx, listInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, lw
func (_m *ObservationService) Update(ctx context.Context, lw *model.ObservationService) (*model.ObservationService, error) {
	ret := _m.Called(ctx, lw)

	var r0 *model.ObservationService
	if rf, ok := ret.Get(0).(func(context.Context, *model.ObservationService) *model.ObservationService); ok {
		r0 = rf(ctx, lw)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ObservationService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.ObservationService) error); ok {
		r1 = rf(ctx, lw)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewObservationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewObservationService creates a new instance of ObservationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewObservationService(t mockConstructorTestingTNewObservationService) *ObservationService {
	mock := &ObservationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
