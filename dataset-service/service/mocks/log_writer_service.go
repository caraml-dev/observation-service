// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	api "github.com/caraml-dev/timber/dataset-service/api"
	mock "github.com/stretchr/testify/mock"
)

// LogWriterService is an autogenerated mock type for the LogWriterService type
type LogWriterService struct {
	mock.Mock
}

// Create provides a mock function with given fields: projectName, logWriter
func (_m *LogWriterService) Create(projectName string, logWriter *api.LogWriter) (*api.LogWriter, error) {
	ret := _m.Called(projectName, logWriter)

	var r0 *api.LogWriter
	if rf, ok := ret.Get(0).(func(string, *api.LogWriter) *api.LogWriter); ok {
		r0 = rf(projectName, logWriter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.LogWriter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *api.LogWriter) error); ok {
		r1 = rf(projectName, logWriter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: projectName, logWriter
func (_m *LogWriterService) Update(projectName string, logWriter *api.LogWriter) (*api.LogWriter, error) {
	ret := _m.Called(projectName, logWriter)

	var r0 *api.LogWriter
	if rf, ok := ret.Get(0).(func(string, *api.LogWriter) *api.LogWriter); ok {
		r0 = rf(projectName, logWriter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.LogWriter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *api.LogWriter) error); ok {
		r1 = rf(projectName, logWriter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLogWriterService interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogWriterService creates a new instance of LogWriterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogWriterService(t mockConstructorTestingTNewLogWriterService) *LogWriterService {
	mock := &LogWriterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
