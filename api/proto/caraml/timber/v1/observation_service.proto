syntax = "proto3";

package caraml.timber.v1;

import "caraml/timber/v1/log.proto";

// Data source where Observation logs should be retrieved from
enum ObservationServiceDataSourceType {
    OBSERVATION_SERVICE_DATA_SOURCE_TYPE_UNSPECIFIED = 0;
    // No-Op represents no need to fetch logs from any data source, this should be selected if
    // Observation Service should be deployed for just the eager API
    OBSERVATION_SERVICE_DATA_SOURCE_TYPE_EAGER = 1;
    // Observation Service will poll logs from a Kafka source
    OBSERVATION_SERVICE_DATA_SOURCE_TYPE_KAFKA = 2;
}

// Configurations of Data source where Observation logs should be retrieved from
message ObservationServiceDataSource {
    ObservationServiceDataSourceType type = 1;
    KafkaConfig kafka_config = 2;
}

// Data sink where Observation logs would be flushed to
enum ObservationServiceDataSinkType {
    OBSERVATION_SERVICE_DATA_SINK_TYPE_UNSPECIFIED = 0;
    // No-Op represents no need to flush logs to any data sink
    OBSERVATION_SERVICE_DATA_SINK_TYPE_NOOP = 1;
    // Observation Service will publish logs to standard output
    OBSERVATION_SERVICE_DATA_SINK_TYPE_STDOUT = 2;
    // Observation Service will flush logs to a Kafka sink
    OBSERVATION_SERVICE_DATA_SINK_TYPE_KAFKA = 3;
    // Observation Service will flush logs to Fluentd
    OBSERVATION_SERVICE_DATA_SINK_TYPE_FLUENTD = 4;
}

// Configurations of Data sink where Observation logs would be flushed to
message ObservationServiceDataSink {
    ObservationServiceDataSinkType type = 1;
    KafkaConfig kafka_config = 2;
    FluentdConfig fluentd_config = 3;
}

// ObservationService describes details of a Observation Service
message ObservationServiceConfig {
    // Unique identifier of an Observation Service deployed by Dataset Service.
    string id = 1;
    // Configuration for pull-based Observation Service data source.
    ObservationServiceDataSource source = 2;
    // Configuration for Observation Service data sink.
    ObservationServiceDataSink sink = 3;
}
