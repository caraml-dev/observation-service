"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import caraml.timber.v1.dataset_service_pb2
import grpc

class DatasetServiceStub:
    """Service for performing:
    1. Deploy/undeploy log writer deployment based on the availability of model and router deployment. 
    2. Synchronize the access control list of CaraML projects to the corresponding BQ dataset to avoid maintaining separate processes to obtain access to the dataset. .
    3. Store and provide access to the log table metadata produced in CaraML. 
    4. Store and provide read only access to the list of log writers it manages.
    5. Store and provide read only access to the list of observation services it manages.
    """
    def __init__(self, channel: grpc.Channel) -> None: ...
    ListLogs: grpc.UnaryUnaryMultiCallable[
        caraml.timber.v1.dataset_service_pb2.ListLogsRequest,
        caraml.timber.v1.dataset_service_pb2.ListLogsResponse]
    """ListLogs return paginated list of logs under a project and filtered by query string."""

    GetLog: grpc.UnaryUnaryMultiCallable[
        caraml.timber.v1.dataset_service_pb2.GetLogRequest,
        caraml.timber.v1.dataset_service_pb2.GetLogResponse]
    """GetLog return details of a log."""

    ListLogWriters: grpc.UnaryUnaryMultiCallable[
        caraml.timber.v1.dataset_service_pb2.ListLogWritersRequest,
        caraml.timber.v1.dataset_service_pb2.ListLogWritersResponse]
    """ListLogWriters return paginated list of log writers under a project and filtered by query string."""

    GetLogWriter: grpc.UnaryUnaryMultiCallable[
        caraml.timber.v1.dataset_service_pb2.GetLogWriterRequest,
        caraml.timber.v1.dataset_service_pb2.GetLogWriterResponse]
    """GetLogWriter return details of the log writer deployment."""

    CreateLogWriter: grpc.UnaryUnaryMultiCallable[
        caraml.timber.v1.dataset_service_pb2.CreateLogWriterRequest,
        caraml.timber.v1.dataset_service_pb2.CreateLogWriterResponse]
    """CreateLogWriter creates a new log writer deployment as specified by the details given in the request body."""

    UpdateLogWriter: grpc.UnaryUnaryMultiCallable[
        caraml.timber.v1.dataset_service_pb2.UpdateLogWriterRequest,
        caraml.timber.v1.dataset_service_pb2.UpdateLogWriterResponse]
    """UpdateLogWriter updates an existing log writer deployment as specified by the details given in the request body."""

    ListObservationServices: grpc.UnaryUnaryMultiCallable[
        caraml.timber.v1.dataset_service_pb2.ListObservationServicesRequest,
        caraml.timber.v1.dataset_service_pb2.ListObservationServicesResponse]
    """ListObservationServices return paginated list of observation services under a project and filtered by query string."""

    GetObservationService: grpc.UnaryUnaryMultiCallable[
        caraml.timber.v1.dataset_service_pb2.GetObservationServiceRequest,
        caraml.timber.v1.dataset_service_pb2.GetObservationServiceResponse]
    """GetObservationService return details of the observation service deployment."""

    CreateObservationService: grpc.UnaryUnaryMultiCallable[
        caraml.timber.v1.dataset_service_pb2.CreateObservationServiceRequest,
        caraml.timber.v1.dataset_service_pb2.CreateObservationServiceResponse]
    """CreateObservationService creates a new observation service deployment as specified by the details given in the request body."""

    UpdateObservationService: grpc.UnaryUnaryMultiCallable[
        caraml.timber.v1.dataset_service_pb2.UpdateObservationServiceRequest,
        caraml.timber.v1.dataset_service_pb2.UpdateObservationServiceResponse]
    """UpdateObservationService updates an existing observation service deployment as specified by the details given in the request body."""


class DatasetServiceServicer(metaclass=abc.ABCMeta):
    """Service for performing:
    1. Deploy/undeploy log writer deployment based on the availability of model and router deployment. 
    2. Synchronize the access control list of CaraML projects to the corresponding BQ dataset to avoid maintaining separate processes to obtain access to the dataset. .
    3. Store and provide access to the log table metadata produced in CaraML. 
    4. Store and provide read only access to the list of log writers it manages.
    5. Store and provide read only access to the list of observation services it manages.
    """
    @abc.abstractmethod
    def ListLogs(self,
        request: caraml.timber.v1.dataset_service_pb2.ListLogsRequest,
        context: grpc.ServicerContext,
    ) -> caraml.timber.v1.dataset_service_pb2.ListLogsResponse:
        """ListLogs return paginated list of logs under a project and filtered by query string."""
        pass

    @abc.abstractmethod
    def GetLog(self,
        request: caraml.timber.v1.dataset_service_pb2.GetLogRequest,
        context: grpc.ServicerContext,
    ) -> caraml.timber.v1.dataset_service_pb2.GetLogResponse:
        """GetLog return details of a log."""
        pass

    @abc.abstractmethod
    def ListLogWriters(self,
        request: caraml.timber.v1.dataset_service_pb2.ListLogWritersRequest,
        context: grpc.ServicerContext,
    ) -> caraml.timber.v1.dataset_service_pb2.ListLogWritersResponse:
        """ListLogWriters return paginated list of log writers under a project and filtered by query string."""
        pass

    @abc.abstractmethod
    def GetLogWriter(self,
        request: caraml.timber.v1.dataset_service_pb2.GetLogWriterRequest,
        context: grpc.ServicerContext,
    ) -> caraml.timber.v1.dataset_service_pb2.GetLogWriterResponse:
        """GetLogWriter return details of the log writer deployment."""
        pass

    @abc.abstractmethod
    def CreateLogWriter(self,
        request: caraml.timber.v1.dataset_service_pb2.CreateLogWriterRequest,
        context: grpc.ServicerContext,
    ) -> caraml.timber.v1.dataset_service_pb2.CreateLogWriterResponse:
        """CreateLogWriter creates a new log writer deployment as specified by the details given in the request body."""
        pass

    @abc.abstractmethod
    def UpdateLogWriter(self,
        request: caraml.timber.v1.dataset_service_pb2.UpdateLogWriterRequest,
        context: grpc.ServicerContext,
    ) -> caraml.timber.v1.dataset_service_pb2.UpdateLogWriterResponse:
        """UpdateLogWriter updates an existing log writer deployment as specified by the details given in the request body."""
        pass

    @abc.abstractmethod
    def ListObservationServices(self,
        request: caraml.timber.v1.dataset_service_pb2.ListObservationServicesRequest,
        context: grpc.ServicerContext,
    ) -> caraml.timber.v1.dataset_service_pb2.ListObservationServicesResponse:
        """ListObservationServices return paginated list of observation services under a project and filtered by query string."""
        pass

    @abc.abstractmethod
    def GetObservationService(self,
        request: caraml.timber.v1.dataset_service_pb2.GetObservationServiceRequest,
        context: grpc.ServicerContext,
    ) -> caraml.timber.v1.dataset_service_pb2.GetObservationServiceResponse:
        """GetObservationService return details of the observation service deployment."""
        pass

    @abc.abstractmethod
    def CreateObservationService(self,
        request: caraml.timber.v1.dataset_service_pb2.CreateObservationServiceRequest,
        context: grpc.ServicerContext,
    ) -> caraml.timber.v1.dataset_service_pb2.CreateObservationServiceResponse:
        """CreateObservationService creates a new observation service deployment as specified by the details given in the request body."""
        pass

    @abc.abstractmethod
    def UpdateObservationService(self,
        request: caraml.timber.v1.dataset_service_pb2.UpdateObservationServiceRequest,
        context: grpc.ServicerContext,
    ) -> caraml.timber.v1.dataset_service_pb2.UpdateObservationServiceResponse:
        """UpdateObservationService updates an existing observation service deployment as specified by the details given in the request body."""
        pass


def add_DatasetServiceServicer_to_server(servicer: DatasetServiceServicer, server: grpc.Server) -> None: ...
