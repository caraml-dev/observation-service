/*
caraml/timber/v1/dataset_service.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1ObservationServiceConfig struct for V1ObservationServiceConfig
type V1ObservationServiceConfig struct {
	// Unique identifier of an Observation Service deployed by Dataset Service.
	Id *string `json:"id,omitempty"`
	Source *V1ObservationServiceDataSource `json:"source,omitempty"`
	Sink *V1ObservationServiceDataSink `json:"sink,omitempty"`
}

// NewV1ObservationServiceConfig instantiates a new V1ObservationServiceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ObservationServiceConfig() *V1ObservationServiceConfig {
	this := V1ObservationServiceConfig{}
	return &this
}

// NewV1ObservationServiceConfigWithDefaults instantiates a new V1ObservationServiceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ObservationServiceConfigWithDefaults() *V1ObservationServiceConfig {
	this := V1ObservationServiceConfig{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1ObservationServiceConfig) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObservationServiceConfig) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1ObservationServiceConfig) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V1ObservationServiceConfig) SetId(v string) {
	o.Id = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *V1ObservationServiceConfig) GetSource() V1ObservationServiceDataSource {
	if o == nil || o.Source == nil {
		var ret V1ObservationServiceDataSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObservationServiceConfig) GetSourceOk() (*V1ObservationServiceDataSource, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *V1ObservationServiceConfig) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given V1ObservationServiceDataSource and assigns it to the Source field.
func (o *V1ObservationServiceConfig) SetSource(v V1ObservationServiceDataSource) {
	o.Source = &v
}

// GetSink returns the Sink field value if set, zero value otherwise.
func (o *V1ObservationServiceConfig) GetSink() V1ObservationServiceDataSink {
	if o == nil || o.Sink == nil {
		var ret V1ObservationServiceDataSink
		return ret
	}
	return *o.Sink
}

// GetSinkOk returns a tuple with the Sink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ObservationServiceConfig) GetSinkOk() (*V1ObservationServiceDataSink, bool) {
	if o == nil || o.Sink == nil {
		return nil, false
	}
	return o.Sink, true
}

// HasSink returns a boolean if a field has been set.
func (o *V1ObservationServiceConfig) HasSink() bool {
	if o != nil && o.Sink != nil {
		return true
	}

	return false
}

// SetSink gets a reference to the given V1ObservationServiceDataSink and assigns it to the Sink field.
func (o *V1ObservationServiceConfig) SetSink(v V1ObservationServiceDataSink) {
	o.Sink = &v
}

func (o V1ObservationServiceConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.Sink != nil {
		toSerialize["sink"] = o.Sink
	}
	return json.Marshal(toSerialize)
}

type NullableV1ObservationServiceConfig struct {
	value *V1ObservationServiceConfig
	isSet bool
}

func (v NullableV1ObservationServiceConfig) Get() *V1ObservationServiceConfig {
	return v.value
}

func (v *NullableV1ObservationServiceConfig) Set(val *V1ObservationServiceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ObservationServiceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ObservationServiceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ObservationServiceConfig(val *V1ObservationServiceConfig) *NullableV1ObservationServiceConfig {
	return &NullableV1ObservationServiceConfig{value: val, isSet: true}
}

func (v NullableV1ObservationServiceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ObservationServiceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


