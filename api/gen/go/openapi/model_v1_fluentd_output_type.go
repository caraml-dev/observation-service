/*
caraml/timber/v1/dataset_service.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V1FluentdOutputType - FLUENTD_OUTPUT_TYPE_STDOUT: Fluentd will publish logs to standard output  - FLUENTD_OUTPUT_TYPE_BQ: Fluentd will flush logs to BigQuery
type V1FluentdOutputType string

// List of v1FluentdOutputType
const (
	V1FLUENTDOUTPUTTYPE_UNSPECIFIED V1FluentdOutputType = "FLUENTD_OUTPUT_TYPE_UNSPECIFIED"
	V1FLUENTDOUTPUTTYPE_STDOUT V1FluentdOutputType = "FLUENTD_OUTPUT_TYPE_STDOUT"
	V1FLUENTDOUTPUTTYPE_BQ V1FluentdOutputType = "FLUENTD_OUTPUT_TYPE_BQ"
)

// All allowed values of V1FluentdOutputType enum
var AllowedV1FluentdOutputTypeEnumValues = []V1FluentdOutputType{
	"FLUENTD_OUTPUT_TYPE_UNSPECIFIED",
	"FLUENTD_OUTPUT_TYPE_STDOUT",
	"FLUENTD_OUTPUT_TYPE_BQ",
}

func (v *V1FluentdOutputType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1FluentdOutputType(value)
	for _, existing := range AllowedV1FluentdOutputTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1FluentdOutputType", value)
}

// NewV1FluentdOutputTypeFromValue returns a pointer to a valid V1FluentdOutputType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1FluentdOutputTypeFromValue(v string) (*V1FluentdOutputType, error) {
	ev := V1FluentdOutputType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1FluentdOutputType: valid values are %v", v, AllowedV1FluentdOutputTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1FluentdOutputType) IsValid() bool {
	for _, existing := range AllowedV1FluentdOutputTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1FluentdOutputType value
func (v V1FluentdOutputType) Ptr() *V1FluentdOutputType {
	return &v
}

type NullableV1FluentdOutputType struct {
	value *V1FluentdOutputType
	isSet bool
}

func (v NullableV1FluentdOutputType) Get() *V1FluentdOutputType {
	return v.value
}

func (v *NullableV1FluentdOutputType) Set(val *V1FluentdOutputType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1FluentdOutputType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1FluentdOutputType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1FluentdOutputType(val *V1FluentdOutputType) *NullableV1FluentdOutputType {
	return &NullableV1FluentdOutputType{value: val, isSet: true}
}

func (v NullableV1FluentdOutputType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1FluentdOutputType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

