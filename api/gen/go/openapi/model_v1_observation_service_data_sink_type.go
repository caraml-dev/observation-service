/*
caraml/timber/v1/dataset_service.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V1ObservationServiceDataSinkType - OBSERVATION_SERVICE_DATA_SINK_TYPE_NOOP: No-Op represents no need to flush logs to any data sink  - OBSERVATION_SERVICE_DATA_SINK_TYPE_STDOUT: Observation Service will publish logs to standard output  - OBSERVATION_SERVICE_DATA_SINK_TYPE_KAFKA: Observation Service will flush logs to a Kafka sink  - OBSERVATION_SERVICE_DATA_SINK_TYPE_FLUENTD: Observation Service will flush logs to Fluentd
type V1ObservationServiceDataSinkType string

// List of v1ObservationServiceDataSinkType
const (
	V1OBSERVATIONSERVICEDATASINKTYPE_UNSPECIFIED V1ObservationServiceDataSinkType = "OBSERVATION_SERVICE_DATA_SINK_TYPE_UNSPECIFIED"
	V1OBSERVATIONSERVICEDATASINKTYPE_NOOP V1ObservationServiceDataSinkType = "OBSERVATION_SERVICE_DATA_SINK_TYPE_NOOP"
	V1OBSERVATIONSERVICEDATASINKTYPE_STDOUT V1ObservationServiceDataSinkType = "OBSERVATION_SERVICE_DATA_SINK_TYPE_STDOUT"
	V1OBSERVATIONSERVICEDATASINKTYPE_KAFKA V1ObservationServiceDataSinkType = "OBSERVATION_SERVICE_DATA_SINK_TYPE_KAFKA"
	V1OBSERVATIONSERVICEDATASINKTYPE_FLUENTD V1ObservationServiceDataSinkType = "OBSERVATION_SERVICE_DATA_SINK_TYPE_FLUENTD"
)

// All allowed values of V1ObservationServiceDataSinkType enum
var AllowedV1ObservationServiceDataSinkTypeEnumValues = []V1ObservationServiceDataSinkType{
	"OBSERVATION_SERVICE_DATA_SINK_TYPE_UNSPECIFIED",
	"OBSERVATION_SERVICE_DATA_SINK_TYPE_NOOP",
	"OBSERVATION_SERVICE_DATA_SINK_TYPE_STDOUT",
	"OBSERVATION_SERVICE_DATA_SINK_TYPE_KAFKA",
	"OBSERVATION_SERVICE_DATA_SINK_TYPE_FLUENTD",
}

func (v *V1ObservationServiceDataSinkType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1ObservationServiceDataSinkType(value)
	for _, existing := range AllowedV1ObservationServiceDataSinkTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1ObservationServiceDataSinkType", value)
}

// NewV1ObservationServiceDataSinkTypeFromValue returns a pointer to a valid V1ObservationServiceDataSinkType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1ObservationServiceDataSinkTypeFromValue(v string) (*V1ObservationServiceDataSinkType, error) {
	ev := V1ObservationServiceDataSinkType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1ObservationServiceDataSinkType: valid values are %v", v, AllowedV1ObservationServiceDataSinkTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1ObservationServiceDataSinkType) IsValid() bool {
	for _, existing := range AllowedV1ObservationServiceDataSinkTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1ObservationServiceDataSinkType value
func (v V1ObservationServiceDataSinkType) Ptr() *V1ObservationServiceDataSinkType {
	return &v
}

type NullableV1ObservationServiceDataSinkType struct {
	value *V1ObservationServiceDataSinkType
	isSet bool
}

func (v NullableV1ObservationServiceDataSinkType) Get() *V1ObservationServiceDataSinkType {
	return v.value
}

func (v *NullableV1ObservationServiceDataSinkType) Set(val *V1ObservationServiceDataSinkType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ObservationServiceDataSinkType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ObservationServiceDataSinkType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ObservationServiceDataSinkType(val *V1ObservationServiceDataSinkType) *NullableV1ObservationServiceDataSinkType {
	return &NullableV1ObservationServiceDataSinkType{value: val, isSet: true}
}

func (v NullableV1ObservationServiceDataSinkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ObservationServiceDataSinkType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

