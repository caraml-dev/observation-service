/*
caraml/timber/v1/dataset_service.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V1LogWriterType - LOG_WRITER_TYPE_FLUENTD: Fluentd will be used for logging
type V1LogWriterType string

// List of v1LogWriterType
const (
	V1LOGWRITERTYPE_UNSPECIFIED V1LogWriterType = "LOG_WRITER_TYPE_UNSPECIFIED"
	V1LOGWRITERTYPE_FLUENTD V1LogWriterType = "LOG_WRITER_TYPE_FLUENTD"
)

// All allowed values of V1LogWriterType enum
var AllowedV1LogWriterTypeEnumValues = []V1LogWriterType{
	"LOG_WRITER_TYPE_UNSPECIFIED",
	"LOG_WRITER_TYPE_FLUENTD",
}

func (v *V1LogWriterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1LogWriterType(value)
	for _, existing := range AllowedV1LogWriterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1LogWriterType", value)
}

// NewV1LogWriterTypeFromValue returns a pointer to a valid V1LogWriterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1LogWriterTypeFromValue(v string) (*V1LogWriterType, error) {
	ev := V1LogWriterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1LogWriterType: valid values are %v", v, AllowedV1LogWriterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1LogWriterType) IsValid() bool {
	for _, existing := range AllowedV1LogWriterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1LogWriterType value
func (v V1LogWriterType) Ptr() *V1LogWriterType {
	return &v
}

type NullableV1LogWriterType struct {
	value *V1LogWriterType
	isSet bool
}

func (v NullableV1LogWriterType) Get() *V1LogWriterType {
	return v.value
}

func (v *NullableV1LogWriterType) Set(val *V1LogWriterType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1LogWriterType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1LogWriterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1LogWriterType(val *V1LogWriterType) *NullableV1LogWriterType {
	return &NullableV1LogWriterType{value: val, isSet: true}
}

func (v NullableV1LogWriterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1LogWriterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

