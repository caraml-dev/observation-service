/*
caraml/timber/v1/dataset_service.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// V1LogProducer struct for V1LogProducer
type V1LogProducer struct {
	// Unique identifier of the producer.
	Id *string `json:"id,omitempty"`
	// Name of the producer, dependent on the type of the log.
	Name *string `json:"name,omitempty"`
	// Name of the CaraML project that hosts the producer.
	Project *string `json:"project,omitempty"`
}

// NewV1LogProducer instantiates a new V1LogProducer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1LogProducer() *V1LogProducer {
	this := V1LogProducer{}
	return &this
}

// NewV1LogProducerWithDefaults instantiates a new V1LogProducer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1LogProducerWithDefaults() *V1LogProducer {
	this := V1LogProducer{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1LogProducer) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1LogProducer) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1LogProducer) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V1LogProducer) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1LogProducer) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1LogProducer) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1LogProducer) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1LogProducer) SetName(v string) {
	o.Name = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *V1LogProducer) GetProject() string {
	if o == nil || o.Project == nil {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1LogProducer) GetProjectOk() (*string, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *V1LogProducer) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *V1LogProducer) SetProject(v string) {
	o.Project = &v
}

func (o V1LogProducer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	return json.Marshal(toSerialize)
}

type NullableV1LogProducer struct {
	value *V1LogProducer
	isSet bool
}

func (v NullableV1LogProducer) Get() *V1LogProducer {
	return v.value
}

func (v *NullableV1LogProducer) Set(val *V1LogProducer) {
	v.value = val
	v.isSet = true
}

func (v NullableV1LogProducer) IsSet() bool {
	return v.isSet
}

func (v *NullableV1LogProducer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1LogProducer(val *V1LogProducer) *NullableV1LogProducer {
	return &NullableV1LogProducer{value: val, isSet: true}
}

func (v NullableV1LogProducer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1LogProducer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


